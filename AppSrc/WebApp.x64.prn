Compiling Program: C:\DataFlex Projects\ColegioAppWeb\AppSrc\WebApp.src
Memory Available: 17468833792
1>Use AllWebAppClasses.pkg
Using pre-compiled package ALLWEBAPPCLASSES.PKG
Including file: AllWebAppClasses.x64.pkd    (C:\Program Files\DataFlex 24.0\Pkg\AllWebAppClasses.x64.pkd)
36015>Use cConnection.pkg
36015>Use cWebMenuItem.pkg
36015>
36015>Object oApplication is a cApplication
36017>    Object oConnection is a cConnection
36019>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\LoginEncryption.pkg)
36019>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cLoginEncryption.pkg)
36019>>>>>Use cCryptographerEx.pkg
36019>>>>>
36019>>>>>Class cLoginEncryption is a cObject
36020>>>>>    
36020>>>>>    Procedure Construct_Object
36022>>>>>        Forward Send Construct_Object
36024>>>>>        // this must be set to a multi (40ish) character random key
36024>>>>>        Property String psEncryptPassword ""
36025>>>>>        
36025>>>>>        Object oDataCrypter is a cCryptographerEx
36027>>>>>            Set piHash to CALG_SHA_256
36028>>>>>            Set piCipher to CALG_AES_256
36029>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
36030>>>>>            Set piProvider to PROV_RSA_AES
36031>>>>>        End_Object
36032>>>>>    End_Procedure
36033>>>>>    
36033>>>>>    // This can be augmented to return a password encryption key using any
36033>>>>>    // hidden mechanism desired.
36033>>>>>    Function GetEncryptionPassword Returns String
36035>>>>>        String sPassword
36035>>>>>        Get psEncryptPassword to sPassword
36036>>>>>        Function_Return sPassword
36037>>>>>    End_Function
36038>>>>>    
36038>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
36038>>>>>    //
36038>>>>>    // Params:
36038>>>>>    //   sPlainText     String to encrypt.
36038>>>>>    // Returns:
36038>>>>>    //   Base64 encoded hash.
36038>>>>>    Function EncryptPassword String sPlainText Returns String
36040>>>>>        String sEncryptPassword sBase64
36040>>>>>        UChar[] ucBinary
36041>>>>>        Pointer pBase64
36041>>>>>        Integer iVoid
36041>>>>>        
36041>>>>>        //  Encrypt Key
36041>>>>>        Get GetEncryptionPassword to sEncryptPassword
36042>>>>>        If (sEncryptPassword = "") Begin
36044>>>>>            Error DFERR_PROGRAM "No encryption password set"
36045>>>>>>
36045>>>>>        End
36045>>>>>>
36045>>>>>        
36045>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
36046>>>>>        
36046>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
36048>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
36049>>>>>>
36049>>>>>            Function_Return ""
36050>>>>>        End
36050>>>>>>
36050>>>>>        
36050>>>>>        //  Encode binary hash to Base64
36050>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
36051>>>>>        Move (PointerToString(pBase64)) to sBase64
36052>>>>>        Move (Free(pBase64)) to iVoid
36053>>>>>        
36053>>>>>        Function_Return sBase64
36054>>>>>    End_Function
36055>>>>>    
36055>>>>>    
36055>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
36055>>>>>    //
36055>>>>>    // Params:
36055>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
36055>>>>>    // Returns:
36055>>>>>    //   Readable plain text password
36055>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
36057>>>>>        String sEncryptPassword
36057>>>>>        UChar[] ucBinary ucPlain
36059>>>>>        Boolean bIsHex
36059>>>>>        Integer iLen iVoid
36059>>>>>        Pointer pBinary
36059>>>>>        
36059>>>>>        If (sBase64EncryptedPassword <> "") Begin
36061>>>>>            //  Decode from Base64
36061>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
36062>>>>>            
36062>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
36063>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
36064>>>>>                        
36064>>>>>            Move (Free(pBinary)) to iVoid
36065>>>>>            
36065>>>>>            //  Encrypted binary hash to string
36065>>>>>            Get GetEncryptionPassword to sEncryptPassword
36066>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
36067>>>>>        End
36067>>>>>>
36067>>>>>        
36067>>>>>        Function_Return (UCharArrayToString(ucPlain))
36068>>>>>    End_Function
36069>>>>>End_Class
36070>>>
36070>>>Object oLoginEncryption is a cLoginEncryption
36072>>>
36072>>>    // this must be created in your appsrc directory and must contain an encryption
36072>>>    // key that is set to psEncryptPassword. It will look something like this
36072>>>    //
36072>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
36072>>>    //  
Including file: LoginEncryptionKey.inc    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\LoginEncryptionKey.inc)
36072>>>>// Studio generated login encryption key
36072>>>>Set psEncryptPassword to "l0#+3%h0Gfb*z}g.2beO1A.4X~j(p@AB%<{=Rgi3"
36073>>>>
36073>>>    
36073>>>    // use this to register this object to your cConnection Object. This object
36073>>>    // must be created after the cConnection object
36073>>>    Move Self to ghoLoginEncryption
36074>>>End_Object
36075>    End_Object
36076>End_Object
36077>
36077>Object oWebApp is a cWebApp
36079>    Set psTheme to "Df_Material"
36080>    Set peAlignView to alignCenter
36081>    
36081>    // It is important to set this so that all views will default
36081>    // to drill down style views.
36081>    Set peApplicationStyle to wvsDrillDown   
36082>    Set peApplicationStateMode to asmHistoryAndUrls 
36083>    Set psEncryptPassword to "tm<W]8a2xu$eEiKo6To#(dY~P0&#as*~_%sXO,xT"
36084>    Set peLoginMode to lmLoginNone
36085>
36085>    Object oViewStack is a cWebViewStack
36087>    End_Object
36088>    
36088>    Procedure HideHeader
36091>        WebSet pbRender of oHeaderPanel to False
36092>    End_Procedure
36093>
36093>    Procedure ShowHeader
36096>        WebSet pbRender of oHeaderPanel to True 
36097>    End_Procedure
36098>
36098>    Object oHeaderPanel is a cWebPanel
36100>        Set peRegion to prTop
36101>        Set psCSSClass to "HeaderPanel"
36102>        
36102>        Object oMenuPanel is a cWebPanel
36104>            Set peRegion to prLeft
36105>            Set piWidth to 50
36106>            
36106>            Object oMenuButton is a cWebMenuButton
36108>                Set piMenuHeight to 500
36109>
36109>                Object oDashboard_itm is a cWebMenuItem
36111>                    Set psCaption to "Seleccione"
36112>                    
36112>                    WebRegisterPath ntNavigateBegin oDashboard
36118>
36118>                    Procedure OnClick
36121>                        Send NavigatePath
36122>                    End_Procedure
36123>                End_Object
36124>
36124>                Object oViewMenu is a cWebMenuItem
36126>                    Set psCaption to "Listados"
36127>
36127>                    Object oSchoolHouseItem1 is a cWebMenuItem
36129>                        Set psCaption to "Listado de COLEGIOS"
36130>
36130>                        WebRegisterPath ntNavigateBegin oSelectSchoolHouse
36136>
36136>                        Procedure OnClick
36139>                            Forward Send OnClick
36141>                                Send NavigatePath
36142>                        End_Procedure
36143>                    End_Object
36144>
36144>                    Object oSelectStudentItem1 is a cWebMenuItem
36146>                        Set psCaption to "Listado de ESTUDIANTES"
36147>
36147>                        WebRegisterPath ntNavigateBegin oSelectStudent
36153>
36153>                        Procedure OnClick
36156>                            Forward Send OnClick
36158>                                Send NavigatePath
36159>                        End_Procedure
36160>                    End_Object
36161>                End_Object
36162>
36162>                Object oSignOut_itm is a cWebMenuItem
36164>                    Set psCaption to "Salir"
36165>
36165>                    Procedure OnClick
36168>                        Send RequestLogOut of ghoWebSessionManager
36169>                    End_Procedure
36170>                End_Object
36171>            End_Object  
36172>
36172>            Object oBackButton is a cWebButton
36174>                Set psCSSClass to "WebBack_Icon"
36175>                Set pbRender to False
36176>                
36176>                Procedure OnClick
36179>                    Handle hoTop
36179>                    
36179>                    Get TopViewHandle of oViewStack to hoTop
36180>                    If (hoTop > 0) Begin
36182>                        Send NavigateCancel of hoTop 
36183>                    End
36183>                End_Procedure
36184>            End_Object
36185>            
36185>            Send AddClient of oViewStack Self
36186>                
36186>            Procedure OnUpdateViewStack
36189>                Handle hoTop hoDflt
36189>                Integer eMode
36189>                Boolean bTop
36189>                
36189>                WebGet peMode of (Owner(Self)) to eMode
36190>                
36190>                Get TopViewHandle of oViewStack to hoTop
36191>                Get GetDefaultView to hoDflt
36192>                Move (hoTop=0 or hoTop=hoDflt) to bTop
36193>                
36193>                WebSet pbRender of oBackButton to (not(bTop) and eMode >= rmMobile)
36194>                WebSet pbRender of oMenuButton to (bTop or eMode < rmMobile)
36195>            End_Procedure
36196>
36196>        End_Object
36197>
36197>        Object oCaptionPanel is a cWebPanel
36199>            Set piColumnCount to 12
36200>
36200>            Object oCaptionBreadcrumb is a cWebBreadcrumb
36202>                Set peBreadcrumbStyle to crumbCaption
36203>                WebSetResponsive peBreadcrumbStyle rmMobile to crumbDropDown
36204>            End_Object         
36205>        End_Object
36206>        
36206>        Object oActionPanel is a cWebPanel
36208>            Set peRegion to prRight
36209>            Set piColumnCount to 1
36210>            Set piWidth to 120
36211>
36211>            Object oMainActions is a cWebActionBar
36213>                Set psGroupName to "MainActions"
36214>
36214>                Set piColumnSpan to 0
36215>                Set peAlign to alignRight
36216>            End_Object
36217>        End_Object
36218>
36218>        Object oBreadcrumbPanel is a cWebPanel
36220>            Set peRegion to prBottom
36221>            
36221>            Object oHorizontalBreadcrumb is a cWebBreadcrumb
36223>                WebSetResponsive pbRender rmMobile to False
36224>            End_Object         
36225>        End_Object
36226>
36226>    End_Object    
36227>
36227>    Use SessionManager.wo
Including file: SessionManager.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\SessionManager.wo)
36227>>>Use cWebSessionManagerStandard.pkg
Including file: cWebSessionManagerStandard.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cWebSessionManagerStandard.pkg)
36227>>>>>Use cWebSessionManager.pkg
36227>>>>>Use cWebAppSessionDataDictionary.dd
Including file: cWebAppSessionDataDictionary.dd    (C:\Program Files\DataFlex 24.0\Pkg\cWebAppSessionDataDictionary.dd)
36227>>>>>>>Use DataDict.pkg
36227>>>>>>>
36227>>>>>>>Open WebAppSession
Including file: WebAppSession.fd    (C:\DataFlex Projects\ColegioAppWeb\DDSrc\WebAppSession.fd)
36229>>>>>>>Open WebAppUser
Including file: WebAppUser.fd    (C:\DataFlex Projects\ColegioAppWeb\DDSrc\WebAppUser.fd)
36231>>>>>>>
36231>>>>>>>Class cWebAppSessionDataDictionary is a DataDictionary
36232>>>>>>>    Procedure Construct_Object
36234>>>>>>>        Forward Send Construct_Object
36236>>>>>>>
36236>>>>>>>        Set Main_File to WebAppSession.File_Number
36237>>>>>>>
36237>>>>>>>        Set Add_Server_File to WebAppUser.File_Number
36238>>>>>>>
36238>>>>>>>        Set ParentNullAllowed WebAppUser.File_Number to True
36239>>>>>>>
36239>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
36240>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
36241>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
36242>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
36243>>>>>>>
36243>>>>>>>        Set Field_Checkbox_Values Field WebAppSession.Active to "Y" "N"
36244>>>>>>>        Set Field_Error Field WebAppSession.Active to 500 "Invalid WebAppSession Active State"
36245>>>>>>>    End_Procedure
36246>>>>>>>
36246>>>>>>>    Procedure Creating
36248>>>>>>>        DateTime dtCurrentDateTime
36248>>>>>>>        
36248>>>>>>>        Forward Send Creating
36250>>>>>>>        
36250>>>>>>>        //  Init usecounter
36250>>>>>>>        Move 0 to WebAppSession.UseCount
36251>>>>>>>        
36251>>>>>>>        //  Set the creation and access time to the current time
36251>>>>>>>        Move (CurrentDateTime()) to dtCurrentDateTime
36252>>>>>>>    
36252>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.CreateTime
36253>>>>>>>        Get TimeToString dtCurrentDateTime to WebAppSession.LastAccessTime
36254>>>>>>>        
36254>>>>>>>        Move dtCurrentDateTime to WebAppSession.CreateDate
36255>>>>>>>        Move dtCurrentDateTime to WebAppSession.LastAccessDate
36256>>>>>>>    End_Procedure
36257>>>>>>>    
36257>>>>>>>    //
36257>>>>>>>    //  Converts the given time to an string that can be saved in the database.
36257>>>>>>>    //
36257>>>>>>>    //  Params:
36257>>>>>>>    //      dtTime  Time to convert
36257>>>>>>>    //  Returns:
36257>>>>>>>    //      String with "HH:MM:SS" format
36257>>>>>>>    //
36257>>>>>>>    Function TimeToString DateTime dtTime Returns String
36259>>>>>>>        String sHours sMinutes sSeconds
36259>>>>>>>        
36259>>>>>>>        //  Extract parts
36259>>>>>>>        Move (String(DateGetHour(dtTime))) to sHours
36260>>>>>>>        Move (String(DateGetMinute(dtTime))) to sMinutes
36261>>>>>>>        Move (String(DateGetSecond(dtTime))) to sSeconds
36262>>>>>>>        
36262>>>>>>>        //  Fill out with 0
36262>>>>>>>        If (Length(sHours) = 1) ;            Move ("0" + sHours) to sHours
36265>>>>>>>        If (Length(sMinutes) = 1) ;            Move ("0" + sMinutes) to sMinutes
36268>>>>>>>        If (Length(sSeconds) = 1) ;            Move ("0" + sSeconds) to sSeconds
36271>>>>>>>        
36271>>>>>>>        Function_Return (sHours + ":" + sMinutes + ":" + sSeconds)
36272>>>>>>>    End_Function
36273>>>>>>>    
36273>>>>>>>    //
36273>>>>>>>    //  Sets the time of the datetime variable to the time in the string.
36273>>>>>>>    //
36273>>>>>>>    //  Params:
36273>>>>>>>    //      dtTime  Datetime variable to add time to
36273>>>>>>>    //      sTimeString String with time in the format "HH:MM:SS"
36273>>>>>>>    //  Returns:
36273>>>>>>>    //      dtDateTime with the loaded time
36273>>>>>>>    //
36273>>>>>>>    Function StringToTime DateTime dtTime String sTimeString Returns DateTime
36275>>>>>>>        String sHours sMinutes sSeconds
36275>>>>>>>        
36275>>>>>>>        //  Extract parts
36275>>>>>>>        Move (Mid(sTimeString, 2, 1)) to sHours
36276>>>>>>>        Move (Mid(sTimeString, 2, 4)) to sMinutes
36277>>>>>>>        Move (Mid(sTimeString, 2, 7)) to sSeconds
36278>>>>>>>        
36278>>>>>>>        //  Set to DateTime
36278>>>>>>>        Move (DateSetHour(dtTime, (Integer(sHours)))) to dtTime
36279>>>>>>>        Move (DateSetMinute(dtTime, (Integer(sMinutes)))) to dtTime
36280>>>>>>>        Move (DateSetSecond(dtTime, (Integer(sSeconds)))) to dtTime
36281>>>>>>>        
36281>>>>>>>        Function_Return dtTime
36282>>>>>>>    End_Function
36283>>>>>>>End_Class
36284>>>>>Use cWebAppUserDataDictionary.dd
Including file: cWebAppUserDataDictionary.dd    (C:\Program Files\DataFlex 24.0\Pkg\cWebAppUserDataDictionary.dd)
36284>>>>>>>Use DataDict.pkg
36284>>>>>>>Open WebAppUser
36286>>>>>>>Open WebAppSession
36288>>>>>>>
36288>>>>>>>Class cWebAppUserDataDictionary is a DataDictionary
36289>>>>>>>    
36289>>>>>>>    Procedure Construct_Object
36291>>>>>>>        Forward Send Construct_Object
36293>>>>>>>        Set Main_File to WebAppUser.File_Number
36294>>>>>>>
36294>>>>>>>        Set Add_Client_File to WebAppSession.File_Number
36295>>>>>>>
36295>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
36296>>>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
36297>>>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
36298>>>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
36299>>>>>>>    End_Procedure
36300>>>>>>>
36300>>>>>>>End_Class
36301>>>>>
36301>>>>>Class cWebSessionManagerStandard is a cWebSessionManager
36302>>>>>    
36302>>>>>    Procedure Construct_Object
36304>>>>>        Handle hoUserDD hoSessionDD
36304>>>>>        
36304>>>>>        Forward Send Construct_Object
36306>>>>>        
36306>>>>>        Property Handle phoUserDD 0      // Handle to the WebAppUser DDO
36307>>>>>        Property Handle phoSessionDD 0   // Handle to the WebAppSession DDO        
36308>>>>>        
36308>>>>>        Get Create (RefClass(cWebAppUserDataDictionary)) to hoUserDD
36309>>>>>        Get Create (RefClass(cWebAppSessionDataDictionary)) to hoSessionDD
36310>>>>>        Set DDO_Server of hoSessionDD to hoUserDD
36311>>>>>
36311>>>>>        Set phoUserDD to hoUserDD
36312>>>>>        Set phoSessionDD to hoSessionDD
36313>>>>>        Property Boolean pbCreatingNewSession False
36314>>>>>        Property String psLoginName
36315>>>>>        Property String psUserName ""
36316>>>>>        Property Integer piUserRights 0
36317>>>>>    End_Procedure
36318>>>>>    
36318>>>>>    Function CreateSession String sRemoteAddress Returns String
36320>>>>>        String sSessionKey
36320>>>>>        Integer iErr
36320>>>>>        Boolean bLogWebSession
36320>>>>>        Handle hoSessionDD       
36320>>>>>        Get phoSessionDD to hoSessionDD
36321>>>>>        
36321>>>>>        //  Get session key
36321>>>>>        Forward Get CreateSession sRemoteAddress to sSessionKey
36323>>>>>        
36323>>>>>        Get pbLogWebSession to bLogWebSession
36324>>>>>        If not bLogWebSession Begin
36326>>>>>            Function_Return sSessionKey        
36327>>>>>        End
36327>>>>>>
36327>>>>>
36327>>>>>        //  Store session
36327>>>>>        Send Clear of hoSessionDD
36328>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.SessionKey to sSessionKey
36329>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.RemoteAddress to sRemoteAddress
36330>>>>>        Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "Y"
36331>>>>>        Get Request_Validate of hoSessionDD to iErr
36332>>>>>        If (iErr) Begin
36334>>>>>            // this should not happen. If it does its a programming error
36334>>>>>            Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36335>>>>>>
36335>>>>>            Function_Return ""
36336>>>>>        End
36336>>>>>>
36336>>>>>        Send Request_Save of hoSessionDD
36337>>>>>        If (Err) Begin
36339>>>>>            // this shouldn't happen, if it does likely a duplicate session key issue, even through request_save already gave an error we give another one to make tracking down easier
36339>>>>>            Error DFERR_PROGRAM C_$WebAppSesionSaveFailed
36340>>>>>>
36340>>>>>            Function_Return ""
36341>>>>>        End
36341>>>>>>
36341>>>>>       
36341>>>>>        Function_Return sSessionKey        
36342>>>>>    End_Function
36343>>>>>    
36343>>>>>    
36343>>>>>    Function ValidateSession String sSessionKey Boolean bOptLoadWebApp Returns Boolean
36345>>>>>        DateTime dtLastAccess dtCurrent
36345>>>>>        TimeSpan tsDiff
36345>>>>>        Integer iErr iSessionTimeout iSpanMinutes
36345>>>>>        Boolean bResult bCreatingNewSession
36345>>>>>        Boolean bLogWebSession bLoadWebApp
36345>>>>>        Integer eLoginMode
36345>>>>>        String sTime
36345>>>>>        Handle hoSessionDD hoUserDD       
36345>>>>>        
36345>>>>>        Move False to bLoadWebApp
36346>>>>>        If (num_arguments >= 2) Begin
36348>>>>>            Move bOptLoadWebApp to bLoadWebApp
36349>>>>>        End
36349>>>>>>
36349>>>>>        
36349>>>>>        Get phoSessionDD to hoSessionDD
36350>>>>>        Get phoUserDD to hoUserDD
36351>>>>>        
36351>>>>>        Get pbLogWebSession to bLogWebSession
36352>>>>>        Get peLoginMode to eLoginMode
36353>>>>>        
36353>>>>>        // for this object, you can only disable logging if login completely is disabled
36353>>>>>        If (not(bLogWebSession) and (eLoginMode<>lmLoginNone)) Begin
36355>>>>>            Error DFERR_PROGRAM C_$WebSessionLoggingMustBeEnabled
36356>>>>>>
36356>>>>>            Function_Return False
36357>>>>>        End
36357>>>>>>
36357>>>>>
36357>>>>>        //  Clear session properties
36357>>>>>        Set psSessionKey to ""
36358>>>>>        Send UpdateSessionProperties True
36359>>>>>        
36359>>>>>        If not bLogWebSession Begin
36361>>>>>            Forward Get ValidateSession sSessionKey to bResult
36363>>>>>            Function_Return bResult
36364>>>>>        End        
36364>>>>>>
36364>>>>>        
36364>>>>>        Move False to bResult
36365>>>>>        Get piSessionTimeout to iSessionTimeout 
36366>>>>>        
36366>>>>>        //  Check if session exists
36366>>>>>        Send Clear of hoSessionDD
36367>>>>>        Move sSessionKey to WebAppSession.SessionKey
36368>>>>>        Send Find of hoSessionDD EQ Index.1
36369>>>>>            
36369>>>>>        If (Found) Begin
36371>>>>>            //  Calculate timespan between now and last access time
36371>>>>>            Move (CurrentDateTime()) to dtCurrent
36372>>>>>            Move WebAppSession.LastAccessDate to dtLastAccess
36373>>>>>            Get StringToTime of hoSessionDD dtLastAccess WebAppSession.LastAccessTime to dtLastAccess
36374>>>>>            Move (dtCurrent - dtLastAccess) to tsDiff
36375>>>>>            Move (SpanTotalMinutes(tsDiff)) to iSpanMinutes
36376>>>>>            
36376>>>>>            //  Check if session didn't time out
36376>>>>>            If (IsDateValid(dtLastAccess) and (iSessionTimeout <= 0 or (iSpanMinutes < iSessionTimeout)) and WebAppSession.Active = "Y") Begin
36378>>>>>                Forward Get ValidateSession sSessionKey to bResult
36380>>>>>                   
36380>>>>>                If (bResult) Begin
36382>>>>>                    //  Update session record
36382>>>>>                    Get TimeToString of hoSessionDD dtCurrent to sTime 
36383>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessDate to dtCurrent
36384>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.LastAccessTime to sTime
36385>>>>>                    Set Field_Changed_Value of hoSessionDD Field WebAppSession.UseCount to (WebAppSession.UseCount + 1)
36386>>>>>                    Get Request_Validate of hoSessionDD to iErr
36387>>>>>                    If (iErr) Begin
36389>>>>>                        // this should not happen. If it does its a programming error
36389>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36390>>>>>>
36390>>>>>                        Function_Return False
36391>>>>>                    End
36391>>>>>>
36391>>>>>                    Send Request_Save of hoSessionDD
36392>>>>>                    
36392>>>>>                    //  Update user properties
36392>>>>>                    Send UpdateSessionProperties False
36393>>>>>                End
36393>>>>>>
36393>>>>>            End
36393>>>>>>
36393>>>>>            Else Begin
36394>>>>>                // Test the Creating New Session Flag to protect against infinite recursion....
36394>>>>>                Get pbCreatingNewSession to bCreatingNewSession
36395>>>>>                
36395>>>>>                If (not(bCreatingNewSession)) Begin
36397>>>>>                    If (not(bLoadWebApp)) Begin
36399>>>>>                        Move False to bResult   //  We can only continue immediately if we were loading the webapp, other operations are not allowed!
36400>>>>>                        Error DFERR_WEBAPP_SESSION_TIMEOUT "Your application session has timed out or is inactive, please login again."
36401>>>>>>
36401>>>>>                        Send NavigateRefresh of ghoWebApp          // refresh the WebApp at the client (triggers a login)
36402>>>>>                    End
36402>>>>>>
36402>>>>>                    Else Begin
36403>>>>>                        Set pbCreatingNewSession to True                    
36404>>>>>                        Get RecreateSession of ghoWebApp to bResult 
36405>>>>>                        Set pbCreatingNewSession to False                        
36406>>>>>                    End
36406>>>>>>
36406>>>>>                End
36406>>>>>>
36406>>>>>            End
36406>>>>>>
36406>>>>>        End
36406>>>>>>
36406>>>>>        Else Begin
36407>>>>>            Error DFERR_WEBAPP_BAD_SESSION_KEY "Session key not known (reload page to recreate session)"
36408>>>>>>
36408>>>>>        End
36408>>>>>>
36408>>>>>        
36408>>>>>        Function_Return bResult
36409>>>>>    End_Function
36410>>>>>    
36410>>>>>    Function UserLogin String sLoginName String sPassword Returns Boolean
36412>>>>>        String sSessionKey sUserPassword
36412>>>>>        Handle hoSessionDD hoUserDD
36412>>>>>        Boolean bMatch  
36412>>>>>        
36412>>>>>        Get phoSessionDD to hoSessionDD
36413>>>>>        Get phoUserDD to hoUserDD
36414>>>>>        Integer iErr eLoginMode
36414>>>>>        
36414>>>>>        // Refind session record
36414>>>>>        Get psSessionKey to sSessionKey
36415>>>>>        Send Clear of hoSessionDD
36416>>>>>        Move sSessionKey to WebAppSession.SessionKey
36417>>>>>        Send Find of hoSessionDD EQ Index.1
36418>>>>>        
36418>>>>>        If (Found and WebAppSession.SessionKey = sSessionKey) Begin
36420>>>>>            Get peLoginMode to eLoginMode
36421>>>>>            
36421>>>>>            //  Find the user
36421>>>>>            Move sLoginName to WebAppUser.LoginName
36422>>>>>            Send Find of hoUserDD EQ Index.1
36423>>>>>            
36423>>>>>            // Check username and password
36423>>>>>            If (Found and (Lowercase(sLoginName) = Lowercase(Trim(WebAppUser.LoginName)))) Begin
36425>>>>>                Get Field_Current_Value of hoUserDD Field WebAppUser.Password to sUserPassword
36426>>>>>                Get ComparePasswords (Trim(sUserPassword)) (Trim(sPassword)) to bMatch
36427>>>>>                
36427>>>>>                If (bMatch) Begin
36429>>>>>                    // Store the login
36429>>>>>                    Set Field_Changed_Value of hoUserDD Field WebAppUser.LastLogin to (CurrentDateTime())
36430>>>>>                    Get Request_Validate of hoSessionDD to iErr
36431>>>>>                    If (iErr) Begin
36433>>>>>                        // this should not happen. If it does its a programming error
36433>>>>>                        Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36434>>>>>>
36434>>>>>                        Function_Return False
36435>>>>>                    End
36435>>>>>>
36435>>>>>                    
36435>>>>>                    Send Request_Save of hoSessionDD
36436>>>>>                    
36436>>>>>                    // Update session properties
36436>>>>>                    Send UpdateSessionProperties False
36437>>>>>                    Send NotifyChangeRights
36438>>>>>                    Function_Return True
36439>>>>>                End
36439>>>>>>
36439>>>>>                Else Begin
36440>>>>>                    //  We should rely directly on this buffer elsewhere but just be sure
36440>>>>>                    Send Clear of hoUserDD
36441>>>>>                End
36441>>>>>>
36441>>>>>            End
36441>>>>>>
36441>>>>>        End
36441>>>>>>
36441>>>>>          
36441>>>>>        Function_Return False
36442>>>>>    End_Function
36443>>>>>    
36443>>>>>    Function IsLoggedIn Returns Boolean
36445>>>>>        String sLoginName
36445>>>>>        Boolean bLogWebSession bLoggedIn
36445>>>>>        
36445>>>>>        Get pbLogWebSession to bLogWebSession
36446>>>>>        If not bLogWebSession Begin
36448>>>>>            Forward Get IsLoggedIn to bLoggedIn
36450>>>>>            Function_Return bLoggedIn
36451>>>>>        End
36451>>>>>>
36451>>>>>        
36451>>>>>        Get psLoginName to sLoginName
36452>>>>>        
36452>>>>>        Function_Return (sLoginName <> "")
36453>>>>>    End_Function
36454>>>>>    
36454>>>>>    
36454>>>>>    //
36454>>>>>    // This procedure is called when validating a session and after logging in. Its purpose is to 
36454>>>>>    // update properties based on the session and user data. Augment this function to update 
36454>>>>>    // properties based on the session / user table. Note that WebAppUser and WebAppSession contain
36454>>>>>    // the right records when this procedure is called.
36454>>>>>    //
36454>>>>>    // Params:
36454>>>>>    //      bClear   True if the procedure is called before session validation to clear properties.
36454>>>>>    //
36454>>>>>    Procedure UpdateSessionProperties Boolean bClear
36456>>>>>        Handle hoUserDD
36456>>>>>        
36456>>>>>        Get phoUserDD to hoUserDD
36457>>>>>        
36457>>>>>        //  Update user properties
36457>>>>>        If (not(bClear) and HasRecord(hoUserDD)) Begin
36459>>>>>            Set psUsername to (Trim(WebAppUser.FullName))
36460>>>>>            Set psLoginName to (Trim(WebAppUser.LoginName))
36461>>>>>            Set piUserRights to WebAppUser.Rights
36462>>>>>            
36462>>>>>            Send OnSessionPropertiesSet 
36463>>>>>        End
36463>>>>>>
36463>>>>>        Else Begin
36464>>>>>            Set psUsername to ""
36465>>>>>            Set psLoginName to ""
36466>>>>>            Set piUserRights to 0
36467>>>>>            
36467>>>>>            Send OnSessionPropertiesClear
36468>>>>>        End
36468>>>>>>
36468>>>>>    End_Procedure
36469>>>>>    
36469>>>>>    //
36469>>>>>    // This function is called to perform the password comparison. It gets the entered password and
36469>>>>>    // the password value of the user table as parameters. The WebAppUser buffer will contain the
36469>>>>>    // right record. This function can be augmented to implement security features like storing the
36469>>>>>    // password as a hashed value.
36469>>>>>    //
36469>>>>>    // Params:
36469>>>>>    //      sUserPassword       Value of the WebAppUser.Password field.
36469>>>>>    //      sEnteredPassword    Value entered on the login screen during login.
36469>>>>>    //
36469>>>>>    Function ComparePasswords String sUserPassword String sEnteredPassword Returns Boolean
36471>>>>>        Function_Return (sUserPassword = sEnteredPassword)
36472>>>>>    End_Function
36473>>>>>    
36473>>>>>    Procedure OnSessionPropertiesSet
36475>>>>>        //  Empty event stub
36475>>>>>    End_Procedure
36476>>>>>    
36476>>>>>    Procedure OnSessionPropertiesClear
36478>>>>>        //  Empty event stub
36478>>>>>    End_Procedure
36479>>>>>    
36479>>>>>    Procedure EndSession
36481>>>>>        Integer iErr
36481>>>>>        Boolean bLogWebSession
36481>>>>>        Handle hoSessionDD       
36481>>>>>        
36481>>>>>        Get phoSessionDD to hoSessionDD
36482>>>>>        Get pbLogWebSession to bLogWebSession
36483>>>>>        If not bLogWebSession Begin
36485>>>>>            Forward Send EndSession
36487>>>>>            Procedure_Return
36488>>>>>        End
36488>>>>>>
36488>>>>>            
36488>>>>>        //  Check if session exists
36488>>>>>        Send Clear of hoSessionDD
36489>>>>>        Get psSessionKey to WebAppSession.SessionKey
36490>>>>>        
36490>>>>>        Send Find of hoSessionDD EQ Index.1
36491>>>>>        If (Found) Begin
36493>>>>>            Set Field_Changed_Value of hoSessionDD Field WebAppSession.Active to "N"
36494>>>>>            Get Request_Validate of hoSessionDD to iErr
36495>>>>>            If (iErr) Begin
36497>>>>>                // this should not happen. If it does its a programming error
36497>>>>>                Error DFERR_PROGRAM C_$WebAppSesionValidateFailed
36498>>>>>>
36498>>>>>                Procedure_Return
36499>>>>>            End
36499>>>>>>
36499>>>>>            Send Request_Save of hoSessionDD
36500>>>>>        End
36500>>>>>>
36500>>>>>    End_Procedure
36501>>>>>
36501>>>>>End_Class
36502>>>>>
36502>>>
36502>>>Object oSessionManager is a cWebSessionManagerStandard
36504>>>End_Object
36505>>>
36505>>>
36505>    Use Login.wo
Including file: Login.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\Login.wo)
36505>>>Use cWebView.pkg
36505>>>Use cWebForm.pkg
36505>>>Use cWebButton.pkg
36505>>>Use cWebPanel.pkg
36505>>>Use cWebLabel.pkg
36505>>>Use cWebSpacer.pkg
36505>>>Use cWebImage.pkg
36505>>>
36505>>>Object oLogin is a cWebView
36507>>>    Set piMinWidth to 250
36508>>>    Set piMaxWidth to 420
36509>>>    Set pbLoginModeEnforced to False
36510>>>    Set piColumnCount to 12
36511>>>    Set psCSSClass to "LoginView"
36512>>>    Set pbServerOnSubmit to True
36513>>>    
36513>>>    Set psStateViewName to "Login"
36514>>>    Set pbStateReplace to True  // Always replace the state so the login never becomes its own history item
36515>>>    
36515>>>    Property String psPrevStateHash ""  // Remember the state hash that the user navigated too so we can redirect after login
36518>>>    
36518>>>    Delegate Set phoLoginView to Self
36520>>>    
36520>>>    Object oTopSpacer is a cWebSpacer
36522>>>        Set pbFillHeight to True
36523>>>        Set piColumnSpan to 12
36524>>>    End_Object
36525>>>    
36525>>>    Object oWarning is a cWebLabel
36527>>>        Set pbVisible to False
36528>>>        Set psCaption to "Invalid User ID or password. \n\rHint: 'Guest' & 'guest'."
36529>>>        Set peAlign to alignCenter
36530>>>        Set piColumnSpan to 12
36531>>>        Set psCSSClass to "LoginWarning"
36532>>>    End_Object
36533>>>    
36533>>>    Object oLogo is a cWebImage
36535>>>        Set piColumnSpan to 10
36536>>>        Set psUrl to "images/DF_Logo_Retina.png"
36537>>>        Set pePosition to wiFit
36538>>>        Set piColumnIndex to 1
36539>>>        Set piHeight to 160
36540>>>        
36540>>>        WebSetResponsive piHeight rmMobile to 100  // Best for small smart phones
36541>>>    End_Object
36542>>>    
36542>>>    Object oLoginName is a cWebForm
36544>>>        Set psLabel to "User ID:"
36545>>>        Set peLabelPosition to lpTop
36546>>>        Set piMaxLength to 20
36547>>>        Set piColumnIndex to 1
36548>>>        Set pbShowLabel to False
36549>>>        Set psPlaceHolder to "loginname"
36550>>>        Set piColumnSpan to 10
36551>>>        Set psAutoComplete to "username"
36552>>>    End_Object
36553>>>    
36553>>>    Object oPassword is a cWebForm
36555>>>        Set psLabel to "Password:"
36556>>>        Set pbPassword to True
36557>>>        Set peLabelAlign to alignLeft
36558>>>        Set piMaxLength to 20
36559>>>        Set peLabelPosition to lpTop
36560>>>        Set pbShowLabel to False
36561>>>        Set psPlaceHolder to "password"
36562>>>        Set piColumnSpan to 10
36563>>>        Set piColumnIndex to 1
36564>>>        Set psAutoComplete to "current-password"
36565>>>    End_Object
36566>>>    
36566>>>    Object oWebSpacer1 is a cWebSpacer
36568>>>        Set piColumnSpan to 12
36569>>>        Set piHeight to 10
36570>>>    End_Object
36571>>>    
36571>>>    Object oLoginButton is a cWebButton
36573>>>        Set pbShowLabel to False
36574>>>        Set psCaption to "sign in"
36575>>>        Set pbServerOnClick to True
36576>>>        Set piColumnSpan to 10
36577>>>        Set piColumnIndex to 1
36578>>>        
36578>>>        Procedure OnClick
36581>>>            Send DoLogin
36582>>>        End_Procedure
36583>>>    End_Object
36584>>>    
36584>>>    Object oBottomSpacer is a cWebSpacer
36586>>>        Set pbFillHeight to True
36587>>>        Set piColumnSpan to 12
36588>>>    End_Object
36589>>>    
36589>>>    Procedure DoLogin
36592>>>        String sLoginName sPassword sPrevStateHash
36592>>>        Boolean bResult
36592>>>        
36592>>>        WebGet psValue of oLoginName to sLoginName
36593>>>        WebGet psValue of oPassword to sPassword
36594>>>        
36594>>>        Get UserLogin of ghoWebSessionManager sLoginName sPassword to bResult
36595>>>        
36595>>>        If (bResult) Begin
36597>>>            Send Hide of oLogin
36598>>>            Send ShowHeader of ghoWebApp
36599>>>            WebSet psCSSClass of ghoWebApp to ""
36600>>>            
36600>>>            WebGet psPrevStateHash to sPrevStateHash
36601>>>            Send NavigateToStateHash of ghoWebApp sPrevStateHash True
36602>>>            
36602>>>            // clear the login values. we don't want to return the login id & password as synchronized properties....
36602>>>            WebSet psValue of oLoginName to ""
36603>>>            WebSet psValue of oPassword  to ""
36604>>>            WebSet pbVisible of oWarning to False
36605>>>        End
36605>>>>
36605>>>        Else Begin
36606>>>            WebSet pbVisible of oWarning to True
36607>>>        End
36607>>>>
36607>>>    End_Procedure
36608>>>    
36608>>>    Procedure OnSubmit
36611>>>        Send DoLogin
36612>>>    End_Procedure
36613>>>    
36613>>>    Procedure OnLoad
36616>>>        String sPrevStateHash sView
36616>>>        
36616>>>        Forward Send OnLoad
36618>>>        
36618>>>        //  Store the current state so we can go back to that later (only if it points to a different view)
36618>>>        Get StateHash of ghoWebApp to sPrevStateHash
36619>>>        Send ParseViewStateHash sPrevStateHash (&sView)
36620>>>        If (Lowercase(sView) <> Lowercase(psStateViewName(Self))) Begin
36622>>>            WebSet psPrevStateHash to sPrevStateHash
36623>>>        End
36623>>>>
36623>>>        
36623>>>    End_Procedure
36624>>>    
36624>>>    Procedure OnBeforeShow
36627>>>        //  Hide header & apply nice background style
36627>>>        Send HideHeader to ghoWebApp
36628>>>        WebSet psCSSClass of ghoWebApp to "LoginBackground"
36629>>>    End_Procedure
36630>>>    
36630>>>End_Object
36631>>>
36631>>>
36631>>>
36631>>>
36631>    Use WebResourceManager.wo
Including file: WebResourceManager.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\WebResourceManager.wo)
36631>>>Use cWebResourceManager.pkg
36631>>>
36631>>>Object oWebResourceManager is a cWebResourceManager
36633>>>End_Object
36634>    
36634>    Use Dashboard.wo
Including file: Dashboard.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\Dashboard.wo)
36634>>>Use cWebView.pkg
36634>>>Use cWebPanel.pkg
36634>>>Use cWebForm.pkg
36634>>>Use cWebButton.pkg
36634>>>Use cWebGroup.pkg
36634>>>Use cWebSpacer.pkg
36634>>>Use cWebHtmlBox.pkg
36634>>>Use cWebMenuGroup.pkg
36634>>>Use cWebMenuItem.pkg
36634>>>Use cWebLabel.pkg
36634>>>Use cWebList.pkg
36634>>>Use cWebColumn.pkg
36634>>>
36634>>>Object oDashboard is a cWebView
36636>>>
36636>>>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
36636>>>    // Add a DDO Structure 
36636>>>    //
36636>>>    // There is no need to synchronize a DD structure on the client so we do
36636>>>    // not set the Server property or send ADDOStructure. We will simply use
36636>>>    // DDO's to mine data and generate HTML for our cWebHTMLBox objects.
36636>>>    // It is the HTML in these objects that is sent to the client each time 
36636>>>    // this page is shown.
36636>>>    //
36636>>>    // Also, it is important for the drill-down Navigation interface that we
36636>>>    // do not set the Server property to some DDO because this will affect 
36636>>>    // constraints in the next view that we navigate to.
36636>>>    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
36636>>>
36636>>>    Set piMaxWidth to 1024
36637>>>    
36637>>>    Set psCaption to "Menú Inicio"
36638>>>    Set peViewType to vtUndefined
36639>>>    Set pbShowCaption to False
36640>>>    Set psCSSClass to "Dashboard"
36641>>>    
36641>>>    Object oWebMainPanel is a cWebPanel
36643>>>        Set piColumnCount to alignCenter
36644>>>        //Set psHtml to '<div><img src="C:\DataFlex Projects\ColegioAppWeb\Bitmaps\colegio.bmp"></div>'
36644>>>        
36644>>>        // - - - - - - - - - - - - - - -
36644>>>        // Main Panel's Responsive Rules
36644>>>        // - - - - - - - - - - - - - - -
36644>>>        WebSetResponsive piColumnCount rmMobile to 1
36645>>>        WebSetResponsive piColumnCount rmTabletPortrait to 16
36646>>>    
36646>>>        Object oTiles_grp is a cWebGroup
36648>>>            Set piColumnSpan to 1
36649>>>            Set pbShowBorder to False
36650>>>            Set pbShowCaption to False
36651>>>            Set piColumnCount to 12
36652>>>            
36652>>>            Set psCSSClass to "TilesGroup"
36653>>>    
36653>>>            /*Object oWelcomeTile is a cWebHtmlBox                Set piColumnSpan to 6                Set psCSSClass to "Tile Light"                Set psHtml to '<div Class="WebCon_Sizer"><div class="Tile_Title">Inicio</div><div Class="Tile_Subtitle">Pantalla Principal</div></div>'                Set psBackgroundColor to "Green"                Set psToolTip to "Pantalla de inicio"                    Procedure OnLoad                    Send UpdateHTML ('<div class="WebCon_Sizer">' + ;                                     '<div class="Tile_Title">Inicio</div>' +;                                     '<div class="Tile_Subtitle">' - htmlEncode(psUserName(ghoWebSessionManager)) - '</div>' +;                                     '</div>')                End_Procedure                            End_Object*/
36653>>>    
36653>>>            Object oTile2 is a cWebHtmlBox
36655>>>                Set pbServerOnClick to True
36656>>>                Set piColumnSpan to 6
36657>>>                Set psCSSClass to "Tile LightAlternate"
36658>>>                Set psHtml to '<div class="WebCon_Sizer" data-ServerOnClick="openview"><div Class="Tile_Title">Listado de Colegios</div><div class="Tile_Subtitle"></div></div>'
36659>>>                Set psBackgroundColor to "Green"
36660>>>                Set psToolTip to "Colegios"
36661>>>                Set piColumnIndex to 3
36662>>>                                
36662>>>                WebRegisterPath ntNavigateForwardCustom oSelectSchoolHouse
36668>>>                
36668>>>                Procedure OnClick String sId String sParam
36671>>>                    Send NavigatePath
36672>>>                End_Procedure
36673>>>                
36673>>>            End_Object
36674>>>    
36674>>>            Object oTile3 is a cWebHtmlBox
36676>>>                Set pbServerOnClick to True
36677>>>                Set piColumnSpan to 6
36678>>>                Set psCSSClass to "Tile Dark"
36679>>>                Set psHtml to '<div class="WebCon_Sizer" data-ServerOnClick="openview"><div Class="Tile_Title">Listado de Alumnos</div><div class="Tile_Subtitle"></div></div>'
36680>>>                Set psBackgroundColor to "Green"
36681>>>                Set psToolTip to "Alumnos"
36682>>>                Set piColumnIndex to 3
36683>>>    
36683>>>                WebRegisterPath ntNavigateForwardCustom oSelectStudent
36689>>>                
36689>>>                Procedure OnClick String sId String sParam
36692>>>                    Send NavigatePath
36693>>>                End_Procedure
36694>>>                
36694>>>            End_Object
36695>>>    
36695>>>/*            Object oTile4 is a cWebHtmlBox                Set pbServerOnClick to True                Set piColumnSpan to 6                Set piColumnIndex to 6                Set psCSSClass to "Tile DarkAlternate"                Set psHtml to '<div class="WebCon_Sizer" data-ServerOnClick="openview"><div Class="Tile_Title">Tile 4</div><div class="Tile_Subtitle"></div></div>'                            // WebRegisterPath ntNavigateForwardCustom oYourViewName                                Procedure OnClick String sId String sParam                    Send NavigatePath                End_Procedure                            End_Object*/
36695>>>        End_Object
36696>>>    
36696>>>    End_Object
36697>>>    
36697>>>    Procedure OnBeforeShow
36700>>>        // Each time this view is shown we will update the appropriate information.
36700>>>    End_Procedure
36701>>>
36701>>>End_Object
36702>    Use SchoolHouse.wo
Including file: SchoolHouse.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\SchoolHouse.wo)
36702>>>// C:\DataFlex Projects\ColegioAppWeb\AppSrc\SchoolHouse.wo
36702>>>// Colegio
36702>>>//
36702>>>
36702>>>Use cWebView.pkg
36702>>>Use cWebPanel.pkg
36702>>>Use cWebMenuGroup.pkg
36702>>>Use cWebMenuItem.pkg
36702>>>Use cWebForm.pkg
36702>>>Use cWebTabContainer.pkg
36702>>>Use cWebTabPage.pkg
36702>>>Use cWebEdit.pkg
36702>>>
36702>>>Use cschoolhouseDataDictionary.dd
Including file: cschoolhouseDataDictionary.dd    (C:\DataFlex Projects\ColegioAppWeb\DDSrc\cschoolhouseDataDictionary.dd)
36702>>>>>Use DataDict.pkg
36702>>>>>
36702>>>>>//importar el archivo donde tenemos la funcion principal de validacion
36702>>>>>Use ValidarEmail.pkg
Including file: ValidarEmail.pkg    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\ValidarEmail.pkg)
36702>>>>>>>Use cJsonHttpTransfer.pkg
Including file: cJsonHttpTransfer.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cJsonHttpTransfer.pkg)
36702>>>>>>>>>// DF JSON internet transfer class definitions.
36702>>>>>>>>>Use cHttpTransfer.pkg
Including file: cHttpTransfer.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cHttpTransfer.pkg)
36702>>>>>>>>>>>Use VDFBase.pkg
36702>>>>>>>>>>>Use GlobalFunctionsProcedures.pkg
36702>>>>>>>>>>>
36702>>>>>>>>>>>External_Function WinAPI_HttpQueryInfo "HttpQueryInfoW" WinInet.dll ;    Handle hRequest ;    DWord dwInfoLevel ;    Pointer lpBuffer ;    Pointer lpdwBufferLength ;    Pointer lpdwIndex ;    Returns Integer
36703>>>>>>>>>>>
36703>>>>>>>>>>>/*BOOL InternetSetOptionW(  [in] HINTERNET hInternet,  [in] DWORD     dwOption,  [in] LPVOID    lpBuffer,  [in] DWORD     dwBufferLength);*/
36703>>>>>>>>>>>External_Function WinAPI_InternetSetOption "InternetSetOptionW" WinInet.dll ;    Handle hInternet ;    DWord dwOption ;    Pointer lpBuffer ;    DWord dwBufferLength ;    Returns Integer
36704>>>>>>>>>>>
36704>>>>>>>>>>>/*BOOL InternetQueryOptionW(  [in]      HINTERNET hInternet,  [in]      DWORD     dwOption,  [out]     LPVOID    lpBuffer,  [in, out] LPDWORD   lpdwBufferLength);*/
36704>>>>>>>>>>>External_Function WinAPI_InternetQueryOption "InternetQueryOptionW" WinInet.dll ;    Handle hInternet ;    DWord dwOption ;    Pointer lpBuffer ;    Pointer lpdwBufferLength ;    Returns Integer
36705>>>>>>>>>>>
36705>>>>>>>>>>>
36705>>>>>>>>>>>//  Available options for dwInfoLevel of WinAPI_HttpQueryInfo
36705>>>>>>>>>>>Define HTTP_QUERY_MIME_VERSION                for 0
36705>>>>>>>>>>>Define HTTP_QUERY_CONTENT_TYPE                for 1
36705>>>>>>>>>>>Define HTTP_QUERY_CONTENT_TRANSFER_ENCODING   for 2
36705>>>>>>>>>>>Define HTTP_QUERY_CONTENT_ID                  for 3
36705>>>>>>>>>>>Define HTTP_QUERY_CONTENT_DESCRIPTION         for 4
36705>>>>>>>>>>>Define HTTP_QUERY_CONTENT_LENGTH              for 5
36705>>>>>>>>>>>Define HTTP_QUERY_CONTENT_LANGUAGE            for 6
36705>>>>>>>>>>>Define HTTP_QUERY_ALLOW                       for 7
36705>>>>>>>>>>>Define HTTP_QUERY_PUBLIC                      for 8
36705>>>>>>>>>>>Define HTTP_QUERY_DATE                        for 9
36705>>>>>>>>>>>Define HTTP_QUERY_EXPIRES                     for 10
36705>>>>>>>>>>>Define HTTP_QUERY_LAST_MODIFIED               for 11
36705>>>>>>>>>>>Define HTTP_QUERY_MESSAGE_ID                  for 12
36705>>>>>>>>>>>Define HTTP_QUERY_URI                         for 13
36705>>>>>>>>>>>Define HTTP_QUERY_DERIVED_FROM                for 14
36705>>>>>>>>>>>Define HTTP_QUERY_COST                        for 15
36705>>>>>>>>>>>Define HTTP_QUERY_LINK                        for 16
36705>>>>>>>>>>>Define HTTP_QUERY_PRAGMA                      for 17
36705>>>>>>>>>>>Define HTTP_QUERY_VERSION                     for 18  // special: part of status line
36705>>>>>>>>>>>Define HTTP_QUERY_STATUS_CODE                 for 19  // special: part of status line
36705>>>>>>>>>>>Define HTTP_QUERY_STATUS_TEXT                 for 20  // special: part of status line
36705>>>>>>>>>>>Define HTTP_QUERY_RAW_HEADERS                 for 21  // special: all headers as ASCIIZ
36705>>>>>>>>>>>Define HTTP_QUERY_RAW_HEADERS_CRLF            for 22  // special: all headers
36705>>>>>>>>>>>Define HTTP_QUERY_CONNECTION                  for 23
36705>>>>>>>>>>>Define HTTP_QUERY_ACCEPT                      for 24
36705>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_CHARSET              for 25
36705>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_ENCODING             for 26
36705>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_LANGUAGE             for 27
36705>>>>>>>>>>>Define HTTP_QUERY_AUTHORIZATION               for 28
36705>>>>>>>>>>>Define HTTP_QUERY_CONTENT_ENCODING            for 29
36705>>>>>>>>>>>Define HTTP_QUERY_FORWARDED                   for 30
36705>>>>>>>>>>>Define HTTP_QUERY_FROM                        for 31
36705>>>>>>>>>>>Define HTTP_QUERY_IF_MODIFIED_SINCE           for 32
36705>>>>>>>>>>>Define HTTP_QUERY_LOCATION                    for 33
36705>>>>>>>>>>>Define HTTP_QUERY_ORIG_URI                    for 34
36705>>>>>>>>>>>Define HTTP_QUERY_REFERER                     for 35
36705>>>>>>>>>>>Define HTTP_QUERY_RETRY_AFTER                 for 36
36705>>>>>>>>>>>Define HTTP_QUERY_SERVER                      for 37
36705>>>>>>>>>>>Define HTTP_QUERY_TITLE                       for 38
36705>>>>>>>>>>>Define HTTP_QUERY_USER_AGENT                  for 39
36705>>>>>>>>>>>Define HTTP_QUERY_WWW_AUTHENTICATE            for 40
36705>>>>>>>>>>>Define HTTP_QUERY_PROXY_AUTHENTICATE          for 41
36705>>>>>>>>>>>Define HTTP_QUERY_ACCEPT_RANGES               for 42
36705>>>>>>>>>>>Define HTTP_QUERY_SET_COOKIE                  for 43
36705>>>>>>>>>>>Define HTTP_QUERY_COOKIE                      for 44
36705>>>>>>>>>>>Define HTTP_QUERY_REQUEST_METHOD              for 45  // special: GET/POST etc.
36705>>>>>>>>>>>Define HTTP_QUERY_REFRESH                     for 46
36705>>>>>>>>>>>Define HTTP_QUERY_CONTENT_DISPOSITION         for 47
36705>>>>>>>>>>>
36705>>>>>>>>>>>
36705>>>>>>>>>>>Class cHttpTransfer is a cBaseHttpTransfer
36706>>>>>>>>>>>    
36706>>>>>>>>>>>    Function HttpPostRequest String sFilePath String sData Integer bDataIsFile Returns Integer
36708>>>>>>>>>>>        Integer bStat
36708>>>>>>>>>>>        Get HttpPostAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
36709>>>>>>>>>>>        Function_Return bStat
36710>>>>>>>>>>>    End_Function
36711>>>>>>>>>>>    
36711>>>>>>>>>>>    // This event is triggered from the runtime. It now uses UChar arrays as the data might 
36711>>>>>>>>>>>    // not be a valid string (it can be any binary data). It still calls the original event for 
36711>>>>>>>>>>>    // backwards compatibility.
36711>>>>>>>>>>>    Procedure OnDataReceivedUC String sContentType UChar[] ucData
36713>>>>>>>>>>>        Send OnDataReceived sContentType (UCharArrayToString(ucData))
36714>>>>>>>>>>>    End_Procedure
36715>>>>>>>>>>>    
36715>>>>>>>>>>>    // Only use this event if you know for sure the data is a string and make sure piBufferSize is
36715>>>>>>>>>>>    // smaller than the argument size.
36715>>>>>>>>>>>    Procedure OnDataReceived String sContentType String sData
36717>>>>>>>>>>>        
36717>>>>>>>>>>>    End_Procedure
36718>>>>>>>>>>>    
36718>>>>>>>>>>>    // Called just before the request is sent. Use this message to set options to the RequestHandle if nessecary.
36718>>>>>>>>>>>    Procedure OnPreSendRequest 
36720>>>>>>>>>>>        
36720>>>>>>>>>>>    End_Procedure
36721>>>>>>>>>>>    
36721>>>>>>>>>>>    Function HttpPutRequest String sFilePath String sData Integer bDataIsFile Returns Integer
36723>>>>>>>>>>>        Integer bStat
36723>>>>>>>>>>>        Get HttpPutAddrRequest sFilePath (AddressOf(sData)) (SizeOfString(sData)) bDataIsfile to bStat
36724>>>>>>>>>>>        Function_Return bStat
36725>>>>>>>>>>>    End_Function
36726>>>>>>>>>>>    
36726>>>>>>>>>>>    // Retrieve header information associated with the previous request.
36726>>>>>>>>>>>    Function QueryInfo DWord dwInfoLevel Returns String
36728>>>>>>>>>>>        Handle hRequestHandle
36728>>>>>>>>>>>        WString wResult
36728>>>>>>>>>>>        Integer iBufferSize iRes iVoid
36728>>>>>>>>>>>
36728>>>>>>>>>>>        Get RequestHandle to hRequestHandle
36729>>>>>>>>>>>        
36729>>>>>>>>>>>        If (hRequestHandle) Begin
36731>>>>>>>>>>>            Move 200 to iBufferSize
36732>>>>>>>>>>>            Move (Repeat(" ", iBufferSize)) to wResult
36733>>>>>>>>>>>            Move (WinAPI_HttpQueryInfo(hRequestHandle, dwInfoLevel, AddressOf(wResult), AddressOf(iBufferSize), 0)) to iRes
36734>>>>>>>>>>>            
36734>>>>>>>>>>>            If (not(iRes) and GetLastError() = 122) Begin //  Insufficient buffersize, retry with received iBufferSize value
36736>>>>>>>>>>>                Increment iBufferSize      
36737>>>>>>>>>>>                
36737>>>>>>>>>>>                Move (Repeat(" ", iBufferSize)) to wResult
36738>>>>>>>>>>>                Move (WinAPI_HttpQueryInfo(hRequestHandle, dwInfoLevel, AddressOf(wResult), AddressOf(iBufferSize), 0)) to iRes  
36739>>>>>>>>>>>            End
36739>>>>>>>>>>>>
36739>>>>>>>>>>>            
36739>>>>>>>>>>>            If (not(iRes)) Begin
36741>>>>>>>>>>>                Move (ShowLastError()) to iVoid
36742>>>>>>>>>>>            End
36742>>>>>>>>>>>>
36742>>>>>>>>>>>        End
36742>>>>>>>>>>>>
36742>>>>>>>>>>>        
36742>>>>>>>>>>>        Function_Return (CString(wResult))
36743>>>>>>>>>>>    End_Function
36744>>>>>>>>>>>    
36744>>>>>>>>>>>    // Returns the statustext returned by the previous request.
36744>>>>>>>>>>>    Function ResponseStatusText Returns String
36746>>>>>>>>>>>        String sStatus
36746>>>>>>>>>>>        
36746>>>>>>>>>>>        Get QueryInfo HTTP_QUERY_STATUS_TEXT to sStatus
36747>>>>>>>>>>>        
36747>>>>>>>>>>>        Function_Return sStatus
36748>>>>>>>>>>>    End_Function
36749>>>>>>>>>>>    
36749>>>>>>>>>>>End_Class
36750>>>>>>>>>Use cJsonObject.pkg
36750>>>>>>>>>Use GlobalFunctionsProcedures.pkg
36750>>>>>>>>>
36750>>>>>>>>>// these define the three characters that define BOM for utf8.
36750>>>>>>>>>// These serve no purpos and are rarely used. If used they must be removed
36750>>>>>>>>>Define C_BOM1 for |CI$EF
36750>>>>>>>>>Define C_BOM2 for |CI$BB
36750>>>>>>>>>Define C_BOM3 for |CI$BF
36750>>>>>>>>>
36750>>>>>>>>>
36750>>>>>>>>>
36750>>>>>>>>>// define JSON transfer status codes used by peJsonTransferStatus
36750>>>>>>>>>Enum_List
36750>>>>>>>>>    Define jtsOk                 // ok
36750>>>>>>>>>    Define jtsHttpRequestFailed  // the post/get http request returned an error
36750>>>>>>>>>    Define jtsInvalidContentType // response content type not JSON
36750>>>>>>>>>    Define jtsNotJson            // return value not JSON (could not load in object)
36750>>>>>>>>>    Define jtsError              // unspecified return error
36750>>>>>>>>>End_Enum_List
36750>>>>>>>>>
36750>>>>>>>>>
36750>>>>>>>>>Class cJsonHttpTransfer is a cHttpTransfer
36751>>>>>>>>>    
36751>>>>>>>>>    Procedure Construct_Object
36753>>>>>>>>>        Forward Send Construct_object
36755>>>>>>>>>        
36755>>>>>>>>>        Property String  psContentTypeSent "application/json; charset=utf-8"     // default content type for posted data
36756>>>>>>>>>        
36756>>>>>>>>>        Property Boolean pbClearHeaders      True         // should headers always be cleared after a post
36757>>>>>>>>>        
36757>>>>>>>>>        Property UChar[] pucDataReceived                 // maintained by object
36758>>>>>>>>>        
36758>>>>>>>>>        Property String  psContentTypeReceived ''         // content type received
36759>>>>>>>>>        
36759>>>>>>>>>        Property String  psJsonParseError ''              // Set if response JSON can't be parsed
36760>>>>>>>>>        
36760>>>>>>>>>        Property String  psContentTypeExpected 'application/json' // content type received - expected value should be contained in here.
36761>>>>>>>>>        
36761>>>>>>>>>        Property Integer peJsonTransferStatus jtsOk
36762>>>>>>>>>        
36762>>>>>>>>>        // if true, the http post does not happend and whatever was posted is just returned as a copy.
36762>>>>>>>>>        // Good for internal Testing
36762>>>>>>>>>        Property Boolean pbPostLoopTest False
36763>>>>>>>>>        
36763>>>>>>>>>        Set piBufferSize to -1  //  No chunking needed
36764>>>>>>>>>    End_Procedure
36765>>>>>>>>>    
36765>>>>>>>>>    // private helper function. Convert data passed by pointer to an JSON document.
36765>>>>>>>>>    // return 0, if error
36765>>>>>>>>>    //
36765>>>>>>>>>    Function UCharDatatoJson UChar[] ucJson Returns Handle
36767>>>>>>>>>        Integer iVoid bOk
36767>>>>>>>>>        Handle hoJson
36767>>>>>>>>>        String sError
36767>>>>>>>>>        Get Create of Desktop (RefClass(cJsonObject)) to hoJson
36768>>>>>>>>>        Get ParseUTF8 of hoJson ucJson to bOk
36769>>>>>>>>>        If not bOk Begin
36771>>>>>>>>>            // store the JSON parse error info
36771>>>>>>>>>            Get psParseError of hoJson to sError
36772>>>>>>>>>            Set psJsonParseError to sError
36773>>>>>>>>>            Send Destroy of hoJson
36774>>>>>>>>>            Move 0 to hoJson
36775>>>>>>>>>        End
36775>>>>>>>>>>
36775>>>>>>>>>        Function_Return hoJson
36776>>>>>>>>>    End_Function
36777>>>>>>>>>    
36777>>>>>>>>>    // Clear pucDataReceived
36777>>>>>>>>>    Procedure ClearDataReceived
36779>>>>>>>>>        UChar[] ucEmpty
36780>>>>>>>>>        
36780>>>>>>>>>        Set pucDataReceived to ucEmpty
36781>>>>>>>>>        Set psJsonParseError to ''
36782>>>>>>>>>    End_Procedure
36783>>>>>>>>>    
36783>>>>>>>>>    // augment to release any memor
36783>>>>>>>>>    Procedure Destroy_Object
36785>>>>>>>>>        Send ClearDataReceived
36786>>>>>>>>>        Forward Send Destroy_object
36788>>>>>>>>>    End_Procedure
36789>>>>>>>>>    
36789>>>>>>>>>    // called during http transfer. Take passed data and append to pucDataReceived.
36789>>>>>>>>>    // If new transfer save contenttype.
36789>>>>>>>>>    Procedure OnDataReceivedUC String sContentType UChar[] ucData
36791>>>>>>>>>        UChar[] ucBuffer
36792>>>>>>>>>        Integer iDataLen
36792>>>>>>>>>        
36792>>>>>>>>>        Move (SizeOfArray(ucData)) to iDataLen
36793>>>>>>>>>        
36793>>>>>>>>>        If (iDataLen > 0) Begin
36795>>>>>>>>>            Get pucDataReceived to ucBuffer
36796>>>>>>>>>            If (SizeOfArray(ucBuffer) > 0) Begin
36798>>>>>>>>>                Set pucDataReceived to (AppendArray(ucBuffer, ucData))
36799>>>>>>>>>            End
36799>>>>>>>>>>
36799>>>>>>>>>            Else Begin
36800>>>>>>>>>                Set psContentTypeReceived to sContentType
36801>>>>>>>>>                
36801>>>>>>>>>                If (iDataLen > 3 and ucData[0]=C_BOM1 and ucData[1]=C_BOM2 and ucData[2]=C_BOM3) Begin
36803>>>>>>>>>                    Set pucDataReceived to (CopyArray(ucData, 3, iDataLen - 1))
36804>>>>>>>>>                End
36804>>>>>>>>>>
36804>>>>>>>>>                Else Begin
36805>>>>>>>>>                    Set pucDataReceived to ucData
36806>>>>>>>>>                End
36806>>>>>>>>>>
36806>>>>>>>>>            End
36806>>>>>>>>>>
36806>>>>>>>>>        End
36806>>>>>>>>>>
36806>>>>>>>>>    End_Procedure
36807>>>>>>>>>    
36807>>>>>>>>>    Function LoopDataBack UChar[] ucData Returns Boolean
36809>>>>>>>>>        Pointer pInData
36809>>>>>>>>>        Boolean bOk
36809>>>>>>>>>        
36809>>>>>>>>>        Set pucDataReceived to ucData
36810>>>>>>>>>        Set psContentTypeReceived to (psContentTypeExpected(Self))
36811>>>>>>>>>        
36811>>>>>>>>>        Function_Return True
36812>>>>>>>>>    End_Function
36813>>>>>>>>>    
36813>>>>>>>>>    
36813>>>>>>>>>    Function HttpVerbJsonAddrExec String sHost String sFilePath Pointer pJson Integer iLen String sVerb  Returns Boolean
36815>>>>>>>>>        Boolean bOk
36815>>>>>>>>>        Integer iError
36815>>>>>>>>>        String sContentType
36815>>>>>>>>>        
36815>>>>>>>>>        Send ClearDataReceived  // this should be zero, just in case it is not
36816>>>>>>>>>        Set psRemoteHost to sHost
36817>>>>>>>>>        
36817>>>>>>>>>        Get psContentTypeSent to sContentType
36818>>>>>>>>>        If (iLen > 0 and sContentType <> "") Begin
36820>>>>>>>>>            Get AddHeader "Content-Type" sContentType to bok
36821>>>>>>>>>        End
36821>>>>>>>>>>
36821>>>>>>>>>        Get HttpVerbAddrRequest sFilePath pJson iLen False sVerb to bOK
36822>>>>>>>>>        
36822>>>>>>>>>        // You need to clear headers between posts. If you need to set custom headers you should
36822>>>>>>>>>        // set pbClearHeaders to false and then manually send ClearHeaders and AddHeaders in your code
36822>>>>>>>>>        If (pbClearHeaders(Self)) ;            Send ClearHeaders
36825>>>>>>>>>        
36825>>>>>>>>>        
36825>>>>>>>>>        Function_Return bOk
36826>>>>>>>>>    End_Function
36827>>>>>>>>>    
36827>>>>>>>>>    // We assume but do not verify that the data in ucJson is actually UTF8 JSON
36827>>>>>>>>>    Function HttpVerbJsonUChar String sHost String sFilePath UChar[] ucJson String sVerb Returns UChar[]
36829>>>>>>>>>        Integer iLen
36829>>>>>>>>>        Boolean bOk
36829>>>>>>>>>        UChar[] ucJsonReceived
36830>>>>>>>>>        String sContentTypeReceived sContentTypeExpected
36830>>>>>>>>>        
36830>>>>>>>>>        Move (SizeOfArray(ucJson)) to iLen
36831>>>>>>>>>        
36831>>>>>>>>>        If (pbPostLoopTest(Self)) Begin
36833>>>>>>>>>            Get LoopDataBack ucJson to bOk
36834>>>>>>>>>        End
36834>>>>>>>>>>
36834>>>>>>>>>        Else Begin
36835>>>>>>>>>            Get HttpVerbJsonAddrExec sHost sFilePath (AddressOf(ucJson)) iLen sVerb to bOk
36836>>>>>>>>>        End
36836>>>>>>>>>>
36836>>>>>>>>>                
36836>>>>>>>>>        If bOk Begin
36838>>>>>>>>>            Set peJsonTransferStatus to jtsOk
36839>>>>>>>>>            Get pucDataReceived to ucJsonReceived
36840>>>>>>>>>            
36840>>>>>>>>>            If (SizeOfArray(ucJsonReceived) > 0) Begin
36842>>>>>>>>>                // we have data, check that the content type is ok. This is as far
36842>>>>>>>>>                // as we can go here.
36842>>>>>>>>>                Get psContentTypeReceived to sContentTypeReceived
36843>>>>>>>>>                Get psContentTypeExpected to sContentTypeExpected
36844>>>>>>>>>                // If contentType expected is empty, we allow anything
36844>>>>>>>>>                If (sContentTypeExpected<>"" and pos(lowercase(sContentTypeExpected),lowercase(sContentTypeReceived))=0) Begin
36846>>>>>>>>>                    Set peJsonTransferStatus to jtsInvalidContentType
36847>>>>>>>>>                End
36847>>>>>>>>>>
36847>>>>>>>>>            End
36847>>>>>>>>>>
36847>>>>>>>>>        End
36847>>>>>>>>>>
36847>>>>>>>>>        Else Begin
36848>>>>>>>>>            Set peJsonTransferStatus to jtsHttpRequestFailed
36849>>>>>>>>>        End
36849>>>>>>>>>>
36849>>>>>>>>>                
36849>>>>>>>>>        Function_Return ucJsonReceived
36850>>>>>>>>>    End_Function
36851>>>>>>>>>    
36851>>>>>>>>>    // Generic HTTP Request - it is passed the Verb. Used by all other http requests
36851>>>>>>>>>    Function HttpVerbJson  String sHost String sFilePath Handle  hoJsonRequest String sVerb Boolean ByRef bOk Returns Handle
36853>>>>>>>>>        UChar[] ucJsonRequest ucJsonResponse
36855>>>>>>>>>        Handle hoJsonResponse
36855>>>>>>>>>        Integer eStat
36855>>>>>>>>>        
36855>>>>>>>>>        If (hoJsonRequest<>0) Begin
36857>>>>>>>>>            Get StringifyUTF8 of hoJsonRequest to ucJsonRequest
36858>>>>>>>>>        End
36858>>>>>>>>>>
36858>>>>>>>>>        
36858>>>>>>>>>        Get HttpVerbJsonUChar sHost sFilePath ucJsonRequest sVerb to ucJsonResponse
36859>>>>>>>>>        
36859>>>>>>>>>        If (SizeOfArray(ucJsonResponse)) Begin
36861>>>>>>>>>            Get UCharDatatoJson ucJsonResponse to hoJsonResponse
36862>>>>>>>>>            If (hoJsonResponse=0) Begin
36864>>>>>>>>>                // this indicates that data was returned but it could not be loaded as Json
36864>>>>>>>>>                Set peJsonTransferStatus to jtsNotJson
36865>>>>>>>>>                // note bad data is still is ppDataReceived (might be useful for debugging)
36865>>>>>>>>>            End
36865>>>>>>>>>>
36865>>>>>>>>>        End
36865>>>>>>>>>>
36865>>>>>>>>>        
36865>>>>>>>>>        // return Ok status by reference
36865>>>>>>>>>        Get peJsonTransferStatus to eStat
36866>>>>>>>>>        Move (eStat=jtsOk) to bOk
36867>>>>>>>>>        
36867>>>>>>>>>        Function_Return hoJsonResponse
36868>>>>>>>>>    End_Function
36869>>>>>>>>>    
36869>>>>>>>>>    Function HttpPostJson String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36871>>>>>>>>>        Handle hoJson
36871>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "POST" (&bOk) to hoJson
36872>>>>>>>>>        Function_Return hoJson
36873>>>>>>>>>    End_Function
36874>>>>>>>>>    
36874>>>>>>>>>    Function HttpGetJson String sHost String sFilePath Boolean ByRef bOk Returns Handle
36876>>>>>>>>>        Pointer pJson
36876>>>>>>>>>        Integer iVoid iLen
36876>>>>>>>>>        Handle hoJson
36876>>>>>>>>>        Get HttpVerbJson sHost sFilePath 0 "GET" (&bOk) to hoJson
36877>>>>>>>>>        Function_Return hoJson
36878>>>>>>>>>    End_Function
36879>>>>>>>>>    
36879>>>>>>>>>    Function HttpPutJson String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36881>>>>>>>>>        Handle hoJson
36881>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "PUT" (&bOk) to hoJson
36882>>>>>>>>>        Function_Return hoJson
36883>>>>>>>>>    End_Function
36884>>>>>>>>>    
36884>>>>>>>>>    Function HttpDeleteJson String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36886>>>>>>>>>        Handle hoJson
36886>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "DELETE" (&bOk) to hoJson
36887>>>>>>>>>        Function_Return hoJson
36888>>>>>>>>>    End_Function
36889>>>>>>>>>    
36889>>>>>>>>>    Function HttpPatchJson  String sHost String sFilePath Handle hoJsonRequest Boolean ByRef bOk Returns Handle
36891>>>>>>>>>        Handle hoJson
36891>>>>>>>>>        Get HttpVerbJson sHost sFilePath hoJsonRequest "PATCH" (&bOk) to hoJson
36892>>>>>>>>>        Function_Return hoJson
36893>>>>>>>>>    End_Function
36894>>>>>>>>>    
36894>>>>>>>>>    // After an Json xfer request this message can be sent to display an error message if one occurred.
36894>>>>>>>>>    // Normally you would first check peJsonTransferStatus to see if it is not jtsOk. If not, send
36894>>>>>>>>>    // LastError to see the error
36894>>>>>>>>>    
36894>>>>>>>>>    // return last JSON transfer error text
36894>>>>>>>>>    Function TransferErrorDescription Returns String
36896>>>>>>>>>        String  sError sJsonError
36896>>>>>>>>>        Integer eJsonTransferStatus
36896>>>>>>>>>        Get peJsonTransferStatus to eJsonTransferStatus
36897>>>>>>>>>        Get psJsonParseError to sJsonError
36898>>>>>>>>>        Case Begin
36898>>>>>>>>>            Case (eJsonTransferStatus=jtsOk) ;                Move '' to sError
36901>>>>>>>>>            Case (eJsonTransferStatus=jtsHttpRequestFailed) ;                Move C_$HttpRequestFailed to sError
36905>>>>>>>>>            Case (eJsonTransferStatus=jtsInvalidContentType) ;                Move (SFormat(C_$InvalidContentTypeReceived,psContentTypeReceived(Self))) to sError
36909>>>>>>>>>            Case (eJsonTransferStatus=jtsNotJson) ;                Move (C_$ReceivedDataNotInJsonFormat * sJsonError) to sError
36913>>>>>>>>>            Case Else ;                Move C_$ReceivedDataIsBad to sError
36915>>>>>>>>>        Case End
36915>>>>>>>>>        Function_Return sError
36916>>>>>>>>>    End_Function
36917>>>>>>>>>    
36917>>>>>>>>>    // can be send to raise an error.
36917>>>>>>>>>    Procedure LastError
36919>>>>>>>>>        Integer eJsonTransferStatus
36919>>>>>>>>>        String sError
36919>>>>>>>>>        
36919>>>>>>>>>        Get peJsonTransferStatus to eJsonTransferStatus
36920>>>>>>>>>        If (eJsonTransferStatus<>jtsOk) Begin
36922>>>>>>>>>            Get TransferErrorDescription to sError
36923>>>>>>>>>            Error DFERR_JSON_HTTP sError
36924>>>>>>>>>>
36924>>>>>>>>>        End
36924>>>>>>>>>>
36924>>>>>>>>>    End_Procedure
36925>>>>>>>>>    
36925>>>>>>>>>    
36925>>>>>>>>>End_Class
36926>>>>>>>
36926>>>>>>>Define cValidos for "ABCDEFGHIJKLMNÑOPQRSTUVWXYZ0123456789._-"
36926>>>>>>>
36926>>>>>>>
36926>>>>>>>Function ValidarEmail String sEmail String ByRef sMsg Returns Boolean
36929>>>>>>>    Boolean bRet
36929>>>>>>>    Move (Uppercase(sEmail)) to sEmail
36930>>>>>>>    Move (Trim(sEmail)) to sEmail
36931>>>>>>>//-----------------------------------------------------------------------------------------------    
36931>>>>>>>    
36931>>>>>>>//-------------------------------------detecta cadena vacia    
36931>>>>>>>    If (sEmail="")Begin
36933>>>>>>>        Move "Escribe algo miarma" to sMsg
36934>>>>>>>        Function_Return False
36935>>>>>>>    End
36935>>>>>>>>
36935>>>>>>>    //--------------
36935>>>>>>>    
36935>>>>>>>    
36935>>>>>>>//-------------------------------------valiada total de caracteres < 256
36935>>>>>>>    If (Length(sEmail)>=256)Begin
36937>>>>>>>        Move "La extensión total no debe superar los 256 caracteres" to sMsg
36938>>>>>>>        Function_Return False
36939>>>>>>>    End
36939>>>>>>>>
36939>>>>>>>    //-------------
36939>>>>>>>
36939>>>>>>>
36939>>>>>>>//------------------------------------NO comienza ni termina con punto
36939>>>>>>>    If (Left(sEmail,1)="." or Right(sEmail,1)=".")Begin
36941>>>>>>>        Move "Un Email no puede empezar ni terminar en punto '.'" to sMsg
36942>>>>>>>        Function_Return False
36943>>>>>>>    End
36943>>>>>>>>
36943>>>>>>>    //------------
36943>>>>>>>    
36943>>>>>>>//------------------------------------Verificar puntos CONSECUTIVOS
36943>>>>>>>    If (Pos("..", sEmail) > 0) Begin
36945>>>>>>>        Move "No puede haber nunca dos o más puntos '.' seguidos" to sMsg
36946>>>>>>>        Function_Return False
36947>>>>>>>    End
36947>>>>>>>>
36947>>>>>>>    //---------
36947>>>>>>>
36947>>>>>>>//------------------------------------Verificar si el email contiene "@" correctamente
36947>>>>>>>    Get ValidarArroba sEmail (&sMsg) to bRet
36948>>>>>>>    
36948>>>>>>>    If (not(bRet)) Begin
36950>>>>>>>        Move "El email debe contener uno y solo un @" to sMsg
36951>>>>>>>        Function_Return False
36952>>>>>>>    End
36952>>>>>>>>
36952>>>>>>>    //----------
36952>>>>>>>    
36952>>>>>>>//-------------------------------------Verificar si la parte LOCAL tiene entre 1 y 64 caracteres    
36952>>>>>>>    Get LongitudParteLocal sEmail (&sMsg) to bRet
36953>>>>>>>    
36953>>>>>>>    If (not(bRet)) Begin
36955>>>>>>>        Move "La longitud antes del @ no es válida. Tiene que tener entre 1 y 64 caracteres" to sMsg
36956>>>>>>>        Function_Return False
36957>>>>>>>    End
36957>>>>>>>>
36957>>>>>>>    //---------
36957>>>>>>>    
36957>>>>>>>//-------------------------------------Verificar si la parte DOMINIO tiene entre 4 y 255 caracteres
36957>>>>>>>    Get LongitudParteDominio sEmail (&sMsg) to bRet
36958>>>>>>>    
36958>>>>>>>    If (not(bRet)) Begin
36960>>>>>>>        Move "La longitud DESPUES del @ no es válida tiene que tener entre 4 y 255 caracteres acabado en punto y la extensión" to sMsg
36961>>>>>>>        Function_Return False
36962>>>>>>>    End
36962>>>>>>>>
36962>>>>>>>    //---------
36962>>>>>>>    
36962>>>>>>>//-------------------------------------Verificar primer digito de cada parte Alfanumerico
36962>>>>>>>    Get PrimerAlfanumerico sEmail (&sMsg) to bRet
36963>>>>>>>    
36963>>>>>>>    If (not(bRet)) Begin
36965>>>>>>>        Move "El PRIMER CARACTER de la parte LOCAL y de la parte despues del @ tiene que ser LETRA o NÚMERO" to sMsg
36966>>>>>>>        Function_Return False
36967>>>>>>>    End
36967>>>>>>>>
36967>>>>>>>
36967>>>>>>>//------------------------------------verificar que todos los digitos sean válidos
36967>>>>>>>    Get DigitosValidos sEmail (&sMsg) to bRet
36968>>>>>>>    
36968>>>>>>>    If (not(bRet))Begin
36970>>>>>>>        Move "Los unicos simbolos válidos son: .   _  - " to sMsg
36971>>>>>>>        Function_Return False
36972>>>>>>>    End
36972>>>>>>>>
36972>>>>>>>    //----------
36972>>>>>>>    
36972>>>>>>>//----------------------------------verificar la longitud de la extensión
36972>>>>>>>    Get Extension sEmail (&sMsg) to bRet
36973>>>>>>>    
36973>>>>>>>    If (not(bRet)) Begin
36975>>>>>>>        Move "la extension debe estar entre 2 y 4 caracteres" to sMsg
36976>>>>>>>        Function_Return False
36977>>>>>>>    End
36977>>>>>>>>
36977>>>>>>>    //---------
36977>>>>>>>    
36977>>>>>>>    
36977>>>>>>>//---------------------------------verificar el Email desde la API (NEUTRINO)
36977>>>>>>>    Get ValidacionAPI sEmail (&sMsg) to bRet
36978>>>>>>>
36978>>>>>>>    Function_Return bRet
36979>>>>>>>
36979>>>>>>>//---------------------------------------------------------------------------------------------------
36979>>>>>>>    Function_Return True
36980>>>>>>>End_Function
36981>>>>>>>
36981>>>>>>>//----------------------------------Función para verificar si el email contiene al menos y solo un "@".
36981>>>>>>>Function ValidarArroba String sEmail String ByRef sMsg Returns Boolean
36984>>>>>>>    Integer iCount iArrobaCount
36984>>>>>>>    Boolean bRet
36984>>>>>>>    
36984>>>>>>>    // Inicializar el contador de "@" a cero
36984>>>>>>>    Move 0 to iArrobaCount
36985>>>>>>>    
36985>>>>>>>    // Contar el número de "@" en el email
36985>>>>>>>    For iCount from 1 to (Length(sEmail))
36991>>>>>>>>
36991>>>>>>>        If (Mid(sEmail, 1, iCount) = "@") Begin
36993>>>>>>>            // Incrementar el contador de "@" si se encuentra uno
36993>>>>>>>            Increment iArrobaCount
36994>>>>>>>        End
36994>>>>>>>>
36994>>>>>>>    Loop
36995>>>>>>>>
36995>>>>>>>    
36995>>>>>>>    // Verificar si hay exactamente un "@" en el email
36995>>>>>>>    If (iArrobaCount = 1) Begin
36997>>>>>>>        // Si hay exactamente un "@" devuelve verdadero
36997>>>>>>>        Move True to bRet
36998>>>>>>>    End
36998>>>>>>>>
36998>>>>>>>    Else Begin
36999>>>>>>>        // Si hay mas de un "@" devolver falso
36999>>>>>>>        Move False to bRet
37000>>>>>>>    End
37000>>>>>>>>
37000>>>>>>>    
37000>>>>>>>    // Retornar el resultado de la validación, si solo hay un @ devuelve verdadero.
37000>>>>>>>    Function_Return bRet
37001>>>>>>>End_Function
37002>>>>>>>
37002>>>>>>>//----------------------------------Función para verificar la longitud de la parte local del email.
37002>>>>>>>Function LongitudParteLocal String sEmail String ByRef sMsg Returns Boolean
37005>>>>>>>    Integer iPos
37005>>>>>>>    String sParteLocal
37005>>>>>>>    Boolean bRet
37005>>>>>>>
37005>>>>>>>    // Encontrar la posición del "@" en el correo electrónico
37005>>>>>>>    Move (Pos("@", sEmail)) to iPos
37006>>>>>>>    
37006>>>>>>>    // Extraer la parte local del correo electrónico
37006>>>>>>>    Move (Left(sEmail, iPos - 1)) to sParteLocal
37007>>>>>>>    
37007>>>>>>>    // Verificar si la longitud de la parte local es válida
37007>>>>>>>    If (Length(sParteLocal) >= 1 and Length(sParteLocal) <= 64) Begin
37009>>>>>>>        // Si la longitud es correcta, devolver verdadero
37009>>>>>>>        Move True to bRet
37010>>>>>>>    End
37010>>>>>>>>
37010>>>>>>>    Else Begin
37011>>>>>>>        // Si la longitud no es válida, devolver falso
37011>>>>>>>        Move False to bRet
37012>>>>>>>    End
37012>>>>>>>>
37012>>>>>>>    
37012>>>>>>>    Function_Return bRet
37013>>>>>>>End_Function
37014>>>>>>>
37014>>>>>>>//----------------------------------Función para verificar la longitud de la parte de DOMINIO del email.
37014>>>>>>>Function LongitudParteDominio String sEmail String ByRef sMsg Returns Boolean
37017>>>>>>>    Integer iPos iPunto
37017>>>>>>>    String sParteDominio
37017>>>>>>>    Boolean bRet
37017>>>>>>>
37017>>>>>>>    // Encontrar la posición del "@" en el correo electrónico
37017>>>>>>>    Move (Pos("@", sEmail)) to iPos
37018>>>>>>>    
37018>>>>>>>    // Extraer la parte de dominio del correo electrónico
37018>>>>>>>    Move (Mid(sEmail, 255, iPos + 1)) to sParteDominio
37019>>>>>>>    Move (RightPos(".", sParteDominio)) to iPunto
37020>>>>>>>    
37020>>>>>>>    // verificar si antes del el ultimo punto hay mas de 4 caracteres
37020>>>>>>>    If (iPunto < 5) Begin
37022>>>>>>>        Move False to bRet
37023>>>>>>>        Function_Return bRet
37024>>>>>>>    End
37024>>>>>>>>
37024>>>>>>>    
37024>>>>>>>    // Verificar si la longitud de la parte de dominio es válida
37024>>>>>>>    If (Length(sParteDominio) >= 4 and Length(sParteDominio) <= 255) Begin
37026>>>>>>>        // Si la longitud es válida, devolver verdadero
37026>>>>>>>        Move True to bRet
37027>>>>>>>    End
37027>>>>>>>>
37027>>>>>>>    Else Begin
37028>>>>>>>        // Si la longitud no es válida, devolver falso
37028>>>>>>>        Move False to bRet
37029>>>>>>>    End
37029>>>>>>>>
37029>>>>>>>    
37029>>>>>>>    // Retornar el resultado de la validación
37029>>>>>>>    Function_Return bRet
37030>>>>>>>End_Function
37031>>>>>>>
37031>>>>>>>
37031>>>>>>>//------------------------------------------------verificar la extension del dominio
37031>>>>>>>Function Extension String sEmail String ByRef sMsg Returns Boolean
37034>>>>>>>    Boolean bRet
37034>>>>>>>    String sParteDominio sExten
37034>>>>>>>    Integer iPos iPunto iLongExten
37034>>>>>>>    
37034>>>>>>>    // Encontrar la posición del "@" en el correo electrónico
37034>>>>>>>    Move (Pos("@", sEmail)) to iPos
37035>>>>>>>    // Extraer la parte de dominio del correo electrónico
37035>>>>>>>    Move (Mid(sEmail, 255, iPos + 1)) to sParteDominio
37036>>>>>>>    //---------esta sentencia me dice cual el es ultimo punto de la cadena
37036>>>>>>>    Move (RightPos(".", sParteDominio)) to iPunto
37037>>>>>>>    
37037>>>>>>>    // Extraer la parte de la extensión del correo electrónico
37037>>>>>>>    Move (Mid(sParteDominio, 5, iPunto+1)) to sExten
37038>>>>>>>    
37038>>>>>>>    // Calcular la longitud total de la extensión
37038>>>>>>>    Move (Length(sExten)) to iLongExten
37039>>>>>>>    
37039>>>>>>>    // Verificar si la longitud de la parte del dominio del correo electrónico es superior a 2
37039>>>>>>>    Move True to bRet
37040>>>>>>>    If (iLongExten < 2 or iLongExten > 4) Begin
37042>>>>>>>        Move False to bRet
37043>>>>>>>        Function_Return bRet
37044>>>>>>>    End
37044>>>>>>>>
37044>>>>>>>    
37044>>>>>>>    Function_Return bRet    
37045>>>>>>>End_Function
37046>>>>>>>
37046>>>>>>>//----------------------------------Función para verificar que la parte local y la parte de dominio comiencen por letra o dígito
37046>>>>>>>Function PrimerAlfanumerico String sEmail String ByRef sMsg Returns Boolean
37049>>>>>>>    Boolean bRet
37049>>>>>>>    Integer iCount iCount2 iPos
37049>>>>>>>    String sPrimerDL sPrimerDD sChar sChar2
37049>>>>>>>
37049>>>>>>>    //iniciamos el boleano como falso
37049>>>>>>>    Move False to bRet
37050>>>>>>>        
37050>>>>>>>    //declaramos el primer digito de cada parte
37050>>>>>>>    Move (Left(sEmail,1)) to sPrimerDL
37051>>>>>>>    
37051>>>>>>>    Move (Pos("@", sEmail)) to iPos
37052>>>>>>>    Move (Mid(sEmail, 1, iPos + 1)) to sPrimerDD
37053>>>>>>>    
37053>>>>>>>    //buscamos que el primer digito de la parte LOCAL coincida con la constante quitando los simbolos 
37053>>>>>>>    For iCount from 1 to (Length(cValidos)-3)
37059>>>>>>>>
37059>>>>>>>        Move (Mid(cValidos, 1, iCount)) to sChar
37060>>>>>>>            If (sChar = sPrimerDL)Begin
37062>>>>>>>                Move True to bRet  
37063>>>>>>>            End
37063>>>>>>>>
37063>>>>>>>            If (bRet) Begin
37065>>>>>>>               
37065>>>>>>>    //buscamos que el primer digito de la parte DOMINIO coincida con la constante quitando los simbolos
37065>>>>>>>            Move False to bRet
37066>>>>>>>        For iCount2 from 1 to (Length(cValidos)-3)
37072>>>>>>>>
37072>>>>>>>            Move (Mid(cValidos, 1, iCount2)) to sChar2
37073>>>>>>>                If (sChar2 = sPrimerDD)Begin
37075>>>>>>>                    Move True to bRet
37076>>>>>>>                    Function_Return bRet
37077>>>>>>>                 End
37077>>>>>>>>
37077>>>>>>>         Loop    
37078>>>>>>>>
37078>>>>>>>                
37078>>>>>>>            End      
37078>>>>>>>>
37078>>>>>>>    Loop
37079>>>>>>>>
37079>>>>>>>        Function_Return bRet
37080>>>>>>>End_Function
37081>>>>>>>
37081>>>>>>>
37081>>>>>>>//------------------------------------------Función para verificar que el resto de digitos sean válidos
37081>>>>>>>Function DigitosValidos String sEmail String ByRef sMsg Returns Boolean
37084>>>>>>>    Boolean bRet
37084>>>>>>>    Integer iPos iPunto iCount iCount2 iCount3 iCount4
37084>>>>>>>    String sParteLocal sParteDominio sLocalChar sLocalChar2 sDominChar sDominChar2
37084>>>>>>>    
37084>>>>>>>    //----------------encontrar el arroba y dividir en partes
37084>>>>>>>    Move (Pos("@", sEmail)) to iPos
37085>>>>>>>    
37085>>>>>>>    //----------extraemos la parte local
37085>>>>>>>    Move (Left(sEmail, iPos - 1)) to sParteLocal
37086>>>>>>>    
37086>>>>>>>    //---------extraemos la parte dominio
37086>>>>>>>    Move (Mid(sEmail, 255, iPos + 1)) to sParteDominio
37087>>>>>>>
37087>>>>>>>
37087>>>>>>>    //---------------------------------verificar la parte LOCAL
37087>>>>>>>    For iCount from 1 to (Length(sParteLocal))
37093>>>>>>>>
37093>>>>>>>        Move (Mid(sParteLocal, 1, iCount)) to sLocalChar
37094>>>>>>>        Move False to bRet
37095>>>>>>>        For iCount2 from 1 to (Length(cValidos))
37101>>>>>>>>
37101>>>>>>>            Move (Mid(cValidos, 1, iCount2)) to sLocalChar2
37102>>>>>>>            If (sLocalChar = sLocalChar2) Begin
37104>>>>>>>                Move True to bRet
37105>>>>>>>            End
37105>>>>>>>>
37105>>>>>>>        Loop
37106>>>>>>>>
37106>>>>>>>        If (not (bRet)) Begin
37108>>>>>>>            Function_Return bRet
37109>>>>>>>        End
37109>>>>>>>>
37109>>>>>>>    Loop
37110>>>>>>>>
37110>>>>>>>
37110>>>>>>>
37110>>>>>>>    //------------------------------verificar la parte DOMINIO
37110>>>>>>>    For iCount3 from 1 to (Length(sParteDominio))
37116>>>>>>>>
37116>>>>>>>        Move (Mid(sParteDominio, 1, iCount3)) to sDominChar
37117>>>>>>>        Move False to bRet
37118>>>>>>>        For iCount4 from 1 to (Length(cValidos))
37124>>>>>>>>
37124>>>>>>>            Move (Mid(cValidos, 1, iCount4)) to sDominChar2
37125>>>>>>>            If (sDominChar = sDominChar2) Begin
37127>>>>>>>                Move True to bRet
37128>>>>>>>            End
37128>>>>>>>>
37128>>>>>>>        Loop
37129>>>>>>>>
37129>>>>>>>        If (not (bRet)) Begin
37131>>>>>>>            Function_Return bRet
37132>>>>>>>        End
37132>>>>>>>>
37132>>>>>>>    Loop
37133>>>>>>>>
37133>>>>>>>
37133>>>>>>>    Function_Return bRet
37134>>>>>>>End_Function
37135>>>>>>>
37135>>>>>>>//----------------------------------------------Función para validar el email desde una api (Neutrino)
37135>>>>>>>Function ValidacionAPI String sEmail String ByRef sMsg Returns Boolean
37138>>>>>>>    Handle hoHttp hoJsonRequest hoResponse
37138>>>>>>>    Boolean bRet bIsnull
37138>>>>>>>    String sResponse sResponse2
37138>>>>>>>    
37138>>>>>>>    //Documentación de referencia: https://www.neutrinoapi.com/api/email-validate/
37138>>>>>>>    
37138>>>>>>>    Get Create (RefClass(cJsonHttpTransfer)) to hoHttp
37139>>>>>>>    Get Create (RefClass(cJsonObject))       to hoJsonRequest
37140>>>>>>>    
37140>>>>>>>    Send InitializeJsonType of hoJsonRequest jsonTypeObject
37141>>>>>>>    
37141>>>>>>>    Send SetMemberValue of hoJsonRequest "email"        jsonTypeString  sEmail
37142>>>>>>>    Send SetMemberValue of hoJsonRequest "fix-typos"    jsonTypeBoolean False
37143>>>>>>>    
37143>>>>>>>    Get AddHeader of hoHttp "User-ID" "Henryrl83_" to bRet
37144>>>>>>>    Get AddHeader of hoHttp "API-Key" "bULS6bwuyVRWWKPZjkKPiU5ohIXaU7IQdAZVpr3rReyaotcF" to bRet
37145>>>>>>>    
37145>>>>>>>    Get HttpPostJson of hoHttp "neutrinoapi.net" "/email-validate" hoJsonRequest (&bRet) to hoResponse
37146>>>>>>>    
37146>>>>>>>    
37146>>>>>>>    If (bRet and (ResponseStatusCode(hoHttp) = 200)) Begin
37148>>>>>>>        //Send Info_Box (Stringify(hoResponse)) "La respuesta de NEUTRINO"
37148>>>>>>>        If (HasMember(hoResponse,"valid") and HasMember(hoResponse, "is-disposable")) Begin
37150>>>>>>>            Get IsMemberOfJsonType of hoResponse "valid" jsonTypeNull to bIsnull
37151>>>>>>>            Get IsMemberOfJsonType of hoResponse "is-disposable" jsonTypeNull to bIsnull
37152>>>>>>>            If (bIsnull) Begin
37154>>>>>>>                Function_Return False
37155>>>>>>>            End
37155>>>>>>>>
37155>>>>>>>            Else Begin
37156>>>>>>>                Get MemberValue of hoResponse "valid" to sResponse
37157>>>>>>>                Get MemberValue of hoResponse "is-disposable" to sResponse2
37158>>>>>>>                If ((sResponse = "1") and (sResponse2 = "0")) Begin
37160>>>>>>>                    Function_Return True
37161>>>>>>>                End
37161>>>>>>>>
37161>>>>>>>                Else Begin
37162>>>>>>>                    Move "La sintaxis es correcta. Está bien escrito. Pero el email no está verificado por NEUTRINO" to sMsg
37163>>>>>>>                    Function_Return False
37164>>>>>>>                End
37164>>>>>>>>
37164>>>>>>>            End
37164>>>>>>>>
37164>>>>>>>        End
37164>>>>>>>>
37164>>>>>>>        Move True to bRet
37165>>>>>>>    End
37165>>>>>>>>
37165>>>>>>>    
37165>>>>>>>    Function_Return bRet
37166>>>>>>>End_Function
37167>>>>>
37167>>>>>Open schoolhouse
Including file: schoolhouse.fd    (C:\DataFlex Projects\ColegioAppWeb\DDSrc\schoolhouse.fd)
37169>>>>>Open student
Including file: student.fd    (C:\DataFlex Projects\ColegioAppWeb\DDSrc\student.fd)
37171>>>>>
37171>>>>>Object oValidationCounty is a DescriptionValidationTable
37173>>>>>    Procedure Fill_List
37176>>>>>        Forward Send Fill_List
37178>>>>>        Send Add_Table_Value "Huelva" "HUELVA"
37179>>>>>        Send Add_Table_Value "Sevilla" "SEVILLA"
37180>>>>>        Send Add_Table_Value "Cádiz" "CÁDIZ"
37181>>>>>        Send Add_Table_Value "Málaga" "MÁLAGA"
37182>>>>>        Send Add_Table_Value "Granada" "GRANADA"
37183>>>>>        Send Add_Table_Value "Córdoba" "CÓRDOBA"
37184>>>>>        Send Add_Table_Value "Almería" "ALMERÍA"
37185>>>>>        Send Add_Table_Value "Jaén" "JAÉN"
37186>>>>>    End_Procedure
37187>>>>>End_Object
37188>>>>>
37188>>>>>//registrar la funciones que luego usaremos para validar email
37188>>>>>Register_Function zValidar_Email Integer iField Returns Boolean
37188>>>>>
37188>>>>>Class cschoolhouseDataDictionary is a DataDictionary
37189>>>>>    
37189>>>>>    Procedure Construct_Object
37191>>>>>        Forward Send Construct_Object
37193>>>>>        Set Main_File to schoolhouse.File_Number
37194>>>>>
37194>>>>>        Set Add_Client_File to student.File_Number
37195>>>>>
37195>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
37196>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
37197>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
37198>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
37199>>>>>
37199>>>>>        Set Field_Option Field schoolhouse.ID DD_DISPLAYONLY to True
37200>>>>>        Set Key_Field_State Field schoolhouse.ID to True
37201>>>>>
37201>>>>>        Set Field_Value_Table Field schoolhouse.County to oValidationCounty
37202>>>>>        Set Field_Class_Name Field schoolhouse.County to "Combo"
37203>>>>>
37203>>>>>        Set Field_Option Field schoolhouse.ModifiedTime DD_DISPLAYONLY to True
37204>>>>>
37204>>>>>        Set Field_Option Field schoolhouse.CreatedTime DD_DISPLAYONLY to True
37205>>>>>
37205>>>>>//una vez verificado que el email es correcto se almacena en el campo correspondiente de la bbdd                
37205>>>>>        Set Field_Validate_msg Field schoolhouse.Email to get_zValidar_Email
37206>>>>>
37206>>>>>    End_Procedure
37207>>>>>
37207>>>>>//llamamos a las funciones definidas en los archivos para validar los email
37207>>>>>
37207>>>>>    //llamar a la funcion para validar el email    
37207>>>>>    Function zValidar_Email Integer iField Returns Boolean
37209>>>>>        Boolean bRet
37209>>>>>        String sEmail sMsg
37209>>>>>        
37209>>>>>        Get Field_Current_Value Field schoolhouse.Email to sEmail
37210>>>>>        
37210>>>>>        Get ValidarEmail sEmail (&sMsg) to bRet
37211>>>>>        If (not(bRet)) Begin
37213>>>>>            Send Data_set_error iField DFERR_OPERATOR sMsg
37214>>>>>        End
37214>>>>>>
37214>>>>>        
37214>>>>>        Function_Return (not(bRet))
37215>>>>>    End_Function
37216>>>>>
37216>>>>>End_Class
37217>>>
37217>>>Object oSchoolHouse is a cWebView
37219>>>    Set piColumnCount to 12
37220>>>    Set psCaption to "Colegio"
37221>>>    Set peWebViewStyle to wvsDrilldown
37222>>>    Set peViewType to vtZoom
37223>>>    Set pbShowCaption to False
37224>>>    Set Verify_Save_Msg to 0
37225>>>    Set piMaxWidth to 1024
37226>>>
37226>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37228>>>    End_Object 
37229>>>
37229>>>    Set Main_DD To oschoolhouse_DD
37230>>>    Set Server  To oschoolhouse_DD
37231>>>
37231>>>
37231>>>    Object oWebMainPanel is a cWebPanel
37233>>>        Set piColumnCount to 12
37234>>>        WebSetResponsive piColumnCount rmMobile to 4
37235>>>
37235>>>        /*Object oschoolhouseID is a cWebForm            Entry_Item schoolhouse.ID            Set piColumnSpan to 2            Set piColumnIndex to 0            Set peLabelPosition to lpTop            Set psLabel to "ID"        End_Object*/ 
37235>>>
37235>>>        Object oschoolhouseName is a cWebForm
37237>>>            Entry_Item schoolhouse.Name
37238>>>            Set piColumnSpan to 8
37239>>>            Set piColumnIndex to 0
37240>>>            Set peLabelPosition to lpTop
37241>>>            Set psLabel to "Nombre"
37242>>>        End_Object 
37243>>>
37243>>>        Object oWebTabContainer is a cWebTabContainer
37245>>>            Set pbFillHeight to True
37246>>>            Set piColumnSpan to 12
37247>>>            Set pbShowLabel to False
37248>>>
37248>>>            Object oPage1 is a cWebTabPage
37250>>>                Set piColumnCount to 12
37251>>>                Set psCaption to "Datos de Contacto"
37252>>>
37252>>>                Object oschoolhouseAddress is a cWebForm
37254>>>                    Entry_Item schoolhouse.Address
37255>>>                    Set piColumnSpan to 6
37256>>>                    Set piColumnIndex to 0
37257>>>                    Set peLabelPosition to lpTop
37258>>>                    Set psLabel to "Dirección"
37259>>>                End_Object 
37260>>>                WebSetResponsive piColumnCount rmMobile to 4
37261>>>
37261>>>                Object oschoolhouseCity is a cWebForm
37263>>>                    Entry_Item schoolhouse.City
37264>>>                    Set piColumnSpan to 5
37265>>>                    Set piColumnIndex to 0
37266>>>                    Set peLabelPosition to lpTop
37267>>>                    Set psLabel to "Ciudad"
37268>>>                End_Object 
37269>>>
37269>>>                Object oschoolhouseZipCode is a cWebForm
37271>>>                    Entry_Item schoolhouse.ZipCode
37272>>>                    Set piColumnSpan to 2
37273>>>                    Set piColumnIndex to 5
37274>>>                    Set peLabelPosition to lpTop
37275>>>                    Set psLabel to "C.P"
37276>>>                End_Object 
37277>>>
37277>>>                Object oschoolhouseCounty is a cWebCombo
37279>>>                    Entry_Item schoolhouse.County
37280>>>                    Set piColumnSpan to 2
37281>>>                    Set piColumnIndex to 7
37282>>>                    Set peLabelPosition to lpTop
37283>>>                    Set psLabel to "Provincia"
37284>>>                End_Object 
37285>>>
37285>>>                Object oschoolhouseEmail is a cWebEdit
37287>>>                    Entry_Item schoolhouse.Email
37288>>>                    Set piColumnSpan to 12
37289>>>                    Set piColumnIndex to 0
37290>>>                    Set peLabelPosition to lpTop
37291>>>                    Set psLabel to "Email"
37292>>>                    Set piMinHeight to 150
37293>>>                End_Object 
37294>>>
37294>>>                Object oschoolhouseNotes is a cWebForm
37296>>>                    Entry_Item schoolhouse.Notes
37297>>>                    Set piColumnSpan to 12
37298>>>                    Set piColumnIndex to 0
37299>>>                    Set peLabelPosition to lpTop
37300>>>                    Set psLabel to "Comentarios Añadidos"
37301>>>                End_Object 
37302>>>            End_Object 
37303>>>
37303>>>            Object oPage2 is a cWebTabPage
37305>>>                Set piColumnCount to 12
37306>>>                Set psCaption to "Fecha y Hora Creación/Modificación"
37307>>>                WebSetResponsive piColumnCount rmMobile to 4
37308>>>
37308>>>                Object oschoolhouseModifiedTime is a cWebForm
37310>>>                    Entry_Item schoolhouse.ModifiedTime
37311>>>                    Set piColumnSpan to 6
37312>>>                    Set piColumnIndex to 0
37313>>>                    Set peLabelPosition to lpTop
37314>>>                    Set psLabel to "Fecha y Hora de Modificación"
37315>>>                End_Object 
37316>>>
37316>>>                Object oschoolhouseCreatedTime is a cWebForm
37318>>>                    Entry_Item schoolhouse.CreatedTime
37319>>>                    Set piColumnSpan to 6
37320>>>                    Set piColumnIndex to 0
37321>>>                    Set peLabelPosition to lpTop
37322>>>                    Set psLabel to "Fecha y Hora de Creación"
37323>>>                End_Object 
37324>>>            End_Object 
37325>>>        End_Object 
37326>>>    End_Object 
37327>>>
37327>>>    Object oActionGroup is a cWebMenuGroup
37329>>>
37329>>>        Object oSaveBtn is a cWebMenuItem
37331>>>            Set psCSSClass to "WebSaveMenuItem"
37332>>>            Set psCaption to "Guardar"
37333>>>
37333>>>            Procedure OnClick
37336>>>                Send Request_Save
37337>>>            End_Procedure
37338>>>
37338>>>        End_Object 
37339>>>
37339>>>        Object oEditBtn is a cWebMenuItem
37341>>>            Set psCSSClass to "WebEditMenuItem"
37342>>>            Set psCaption to "Editar"
37343>>>            Procedure OnClick
37346>>>                Send ChangeEditMode True
37347>>>                Send SetActionButtons
37348>>>            End_Procedure
37349>>>
37349>>>        End_Object 
37350>>>
37350>>>        Object oDeleteBtn is a cWebMenuItem
37352>>>            Set psCSSClass to "WebDeleteMenuItem"
37353>>>            Set psCaption to "Borrar"
37354>>>            Set peActionDisplay to adMenu
37355>>>
37355>>>            Procedure OnClick
37358>>>                Send Request_Delete
37359>>>            End_Procedure
37360>>>
37360>>>        End_Object 
37361>>>
37361>>>        Object oCancelChangesBtn is a cWebMenuItem
37363>>>            Set psCSSClass to "WebIcon_Refresh"
37364>>>            Set psCaption to "Limpiar Cambios"
37365>>>            Set peActionDisplay to adMenu
37366>>>            Procedure OnClick
37369>>>                Send RefreshRecord
37370>>>            End_Procedure
37371>>>
37371>>>        End_Object 
37372>>>    End_Object 
37373>>>
37373>>>    Procedure SetActionButtons
37376>>>        tWebNavigateData NavigateData
37376>>>        tWebNavigateData NavigateData
37376>>>        Boolean bHasRecord
37376>>>        Handle hoDD
37376>>>
37376>>>        Get Server to hoDD
37377>>>        Get GetNavigateData to NavigateData
37378>>>        Get HasRecord of hoDD to bHasRecord
37379>>>
37379>>>        // let's hide all buttons and then Show the ones we want
37379>>>        WebSet pbRender of oEditBtn to False
37380>>>        WebSet pbRender of oSaveBtn to False
37381>>>        WebSet pbRender of oCancelChangesBtn to False
37382>>>        WebSet pbRender of oDeleteBtn to False
37383>>>
37383>>>        If (NavigateData.bReadOnly) Begin
37385>>>            WebSet pbRender of oEditBtn to True
37386>>>        End
37386>>>>
37386>>>        Else Begin
37387>>>            WebSet pbRender of oSaveBtn to True
37388>>>            WebSet pbRender of oCancelChangesBtn to True
37389>>>            WebSet pbRender of oDeleteBtn to bHasRecord
37390>>>        End
37390>>>>
37390>>>    End_Procedure
37391>>>
37391>>>    Procedure OnViewSaved Handle hoServer Boolean bChanged
37394>>>        // Close after save
37394>>>        Send NavigateClose Self
37395>>>    End_Procedure
37396>>>
37396>>>    // this will close the view after a delete
37396>>>    Procedure OnViewDeleted Handle hoDDO
37399>>>        Send NavigateClose Self
37400>>>    End_Procedure
37401>>>
37401>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37404>>>        Case Begin
37404>>>            Case (NavigateData.eNavigateType = nfFromMain)
37406>>>                // If from main, this is a propbably a main file Select to Zoom.
37406>>>                Case Break
37407>>>
37407>>>            Case (NavigateData.eNavigateType = nfFromParent)
37410>>>                // If from parent, this is a constrained drill down.
37410>>>                Case Break
37411>>>
37411>>>            Case (NavigateData.eNavigateType = nfFromChild)
37414>>>                // If from child, this is a probably a parent Zoom from a Zoom.
37414>>>                Case Break
37415>>>
37415>>>            Case Else // must be nfUndefined
37415>>>
37415>>>        Case End
37415>>>
37415>>>        Send SetActionButtons
37416>>>
37416>>>    End_Procedure
37417>>>
37417>>>End_Object 
37418>    Use SelectSchoolHouse.wo
Including file: SelectSchoolHouse.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\SelectSchoolHouse.wo)
37418>>>// C:\DataFlex Projects\ColegioAppWeb\AppSrc\SelectSchoolHouse.wo
37418>>>// SchoolHouse
37418>>>//
37418>>>
37418>>>Use cWebView.pkg
37418>>>Use cWebList.pkg
37418>>>Use cWebMenuGroup.pkg
37418>>>Use cWebMenuItem.pkg
37418>>>Use cWebColumnButton.pkg
37418>>>Use cWebColumn.pkg
37418>>>Use SchoolHouse.wo
37418>>>
37418>>>Use cschoolhouseDataDictionary.dd
37418>>>
37418>>>Object oSelectSchoolHouse is a cWebView
37420>>>    Set psCaption to "COLEGIOS"
37421>>>    Set peWebViewStyle to wvsDrilldown
37422>>>    Set peViewType to vtSelect
37423>>>    Set piColumnCount to 12
37424>>>    Set pbShowCaption to True
37425>>>    Set piMaxWidth to 1024
37426>>>
37426>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37428>>>    End_Object 
37429>>>
37429>>>    Set Main_DD To oschoolhouse_DD
37430>>>    Set Server  To oschoolhouse_DD
37431>>>
37431>>>
37431>>>    Object oList is a cWebList
37433>>>        Set piColumnSpan to 12
37434>>>        Set psCSSClass to "MobileList"
37435>>>        Set pbServerOnRowClick to True
37436>>>        Set pbFillHeight to True
37437>>>        Set pbShowHeader to False
37438>>>        Set piSortColumn to 0
37439>>>
37439>>>        /*Object oschoolhouseID is a cWebColumn            Entry_Item schoolhouse.ID            Set psCaption to "schoolhouse.ID"            Set piWidth to 124            Set piListColSpan to 2        End_Object*/
37439>>>
37439>>>        Object oDetailButton is a cWebColumnButton
37441>>>            Set psCaption to "btn"
37442>>>            Set piWidth to 45
37443>>>            Set pbFixedWidth to True
37444>>>            Set pbResizable to False
37445>>>            Set piListRowSpan to 8
37446>>>            Set psBtnCssClass to "WebButtonIcon WebIcon_Info"
37447>>>            Set peAlign to alignRight
37448>>>            Set pbShowCaption to False
37449>>>            Set pbHidden to True
37450>>>
37450>>>            WebRegisterPath ntNavigateForward oSchoolHouse
37456>>>
37456>>>            Procedure OnClick
37459>>>                Send NavigatePath
37460>>>            End_Procedure
37461>>>
37461>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37464>>>                Move True to NavigateData.bReadOnly
37465>>>            End_Procedure
37466>>>
37466>>>        End_Object 
37467>>>
37467>>>        Object oschoolhouseName is a cWebColumn
37469>>>            Entry_Item schoolhouse.Name
37470>>>            Set psCaption to "schoolhouse.Name"
37471>>>            Set piWidth to 494
37472>>>            Set psCSSClass to "RowCaption"
37473>>>        End_Object 
37474>>>
37474>>>        Object oschoolhouseCity is a cWebColumn
37476>>>            Entry_Item schoolhouse.City
37477>>>            Set psCaption to "schoolhouse.City"
37478>>>            Set piWidth to 505
37479>>>            Set psCSSClass to "RowCaption"
37480>>>        End_Object 
37481>>>
37481>>>        Object oschoolhouseCounty is a cWebColumn
37483>>>            Entry_Item schoolhouse.County
37484>>>            Set psCaption to "schoolhouse.County"
37485>>>            Set piWidth to 281
37486>>>            Set psCSSClass to "RowCaption"
37487>>>            Set pbNewLine to True
37488>>>        End_Object 
37489>>>
37489>>>        Object oschoolhouseEmail is a cWebColumn
37491>>>            Entry_Item schoolhouse.Email
37492>>>            Set psCaption to "schoolhouse.Email"
37493>>>            Set piWidth to 345
37494>>>            Set psCSSClass to "RowCaption"
37495>>>        End_Object 
37496>>>
37496>>>        WebRegisterPath ntNavigateForward oSchoolHouse
37502>>>
37502>>>        Procedure OnRowClick String sRowId
37505>>>            tWebNavigateData NavigateData
37505>>>            tWebNavigateData NavigateData
37505>>>            Get GetNavigateData to NavigateData
37506>>>
37506>>>            Case Begin
37506>>>                Case (NavigateData.eNavigateType = nfFromParent)
37508>>>                    Send NavigateForward of oSchoolHouse Self
37509>>>                    Case Break
37510>>>
37510>>>                Case (NavigateData.eNavigateType = nfFromChild)
37513>>>                    Send NavigateClose Self
37514>>>                    Case Break
37515>>>
37515>>>                Case (NavigateData.eNavigateType = nfFromMain)
37518>>>                    Send NavigateClose Self
37519>>>                    Case Break
37520>>>                    
37520>>>                Case Else // must be nfUndefined
37520>>>                    Send NavigateForward of oSchoolHouse Self
37521>>>            Case End
37521>>>        End_Procedure
37522>>>
37522>>>        Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37525>>>            Move True to NavigateData.bReadOnly
37526>>>        End_Procedure
37527>>>
37527>>>    End_Object 
37528>>>
37528>>>    Object oActionGroup is a cWebMenuGroup
37530>>>
37530>>>        Object oSearch is a cWebMenuItem
37532>>>            Set psCSSClass to "WebPromptMenuItem"
37533>>>            Set psCaption to "Buscar"
37534>>>
37534>>>            Procedure OnClick
37537>>>                Send Search of oList
37538>>>            End_Procedure
37539>>>
37539>>>        End_Object 
37540>>>
37540>>>        Object oNewButton is a cWebMenuItem
37542>>>            Set psCSSClass to "WebClearMenuItem"
37543>>>            Set psCaption to "Nuevo"
37544>>>
37544>>>            WebRegisterPath ntNavigateForward oSchoolHouse
37550>>>
37550>>>            Procedure OnClick
37553>>>                Send NavigatePath
37554>>>            End_Procedure
37555>>>
37555>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
37558>>>                Move True to NavigateData.bNewRecord
37559>>>            End_Procedure
37560>>>
37560>>>        End_Object 
37561>>>    End_Object 
37562>>>
37562>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37565>>>        WebSet pbRender of oNewButton to True
37566>>>        WebSet pbRender of oDetailButton to True
37567>>>
37567>>>        Case Begin
37567>>>            Case (NavigateData.eNavigateType = nfFromParent)
37569>>>                // If from parent, this is a constrained drill down
37569>>>                Case Break
37570>>>
37570>>>            Case (NavigateData.eNavigateType = nfFromChild)
37573>>>                // If from child, this is a probably a parent lookup from a Zoom
37573>>>                Case Break
37574>>>
37574>>>            Case (NavigateData.eNavigateType = nfFromMain)
37577>>>                // If from main, this is a probably a main-file lookup from a Zoom
37577>>>                WebSet pbRender of oDetailButton to False
37578>>>                Case Break
37579>>>
37579>>>            Case Else // must be nfUndefined
37579>>>                // This may be the start of a drilldown query or this may be used for some kind of custom query.
37579>>>
37579>>>        Case End
37579>>>
37579>>>    End_Procedure
37580>>>
37580>>>
37580>>>End_Object 
37581>    Use Student.wo
Including file: Student.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\Student.wo)
37581>>>// C:\DataFlex Projects\ColegioAppWeb\AppSrc\Student.wo
37581>>>// Alumno
37581>>>//
37581>>>
37581>>>Use cWebView.pkg
37581>>>Use cWebPanel.pkg
37581>>>Use cWebMenuGroup.pkg
37581>>>Use cWebMenuItem.pkg
37581>>>Use cWebForm.pkg
37581>>>Use cWebTabContainer.pkg
37581>>>Use cWebTabPage.pkg
37581>>>Use cWebEdit.pkg
37581>>>
37581>>>Use cschoolhouseDataDictionary.dd
37581>>>Use cstudentDataDictionary.dd
Including file: cstudentDataDictionary.dd    (C:\DataFlex Projects\ColegioAppWeb\DDSrc\cstudentDataDictionary.dd)
37581>>>>>Use DataDict.pkg
37581>>>>>
37581>>>>>//importar los archivos donde tenemos las funciones principales de validacion
37581>>>>>Use ValidarDNI.pkg
Including file: ValidarDNI.pkg    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\ValidarDNI.pkg)
37581>>>>>>>Define cLetter for "TRWAGMYFPDXBNJZSQVHLCKE"
37581>>>>>>>Define cNumber for "0123456789"
37581>>>>>>>
37581>>>>>>>//-------------------------------------------
37581>>>>>>>Function ValidacionDNI String sDNI String ByRef sMsg Returns Boolean
37584>>>>>>>    //Convertir en mayúsculas todo lo contenido en la cadena sDNI
37584>>>>>>>    Move (Uppercase(sDNI)) to sDNI
37585>>>>>>>    
37585>>>>>>>    //crea la variable boleana para usarla en la funciones internas de esta función principal
37585>>>>>>>    Boolean bRet
37585>>>>>>>   
37585>>>>>>>    //------------ comprobación de entrada VACÍA
37585>>>>>>>    If (sDNI="") Begin
37587>>>>>>>        Move "Tienes que introducir algo" to sMsg
37588>>>>>>>        Function_Return False
37589>>>>>>>    End
37589>>>>>>>>
37589>>>>>>>
37589>>>>>>>    //-----------------comprobación de LONGITUD de la cadena
37589>>>>>>>    Get DNILen sDNI (&sMsg) to bRet
37590>>>>>>>    
37590>>>>>>>    If (not(bRet)) Begin
37592>>>>>>>        Move "La longitud no es correcta, TIENE QUE TENER 9 DIGITOS" to sMsg
37593>>>>>>>        Function_Return False
37594>>>>>>>    End
37594>>>>>>>>
37594>>>>>>>   
37594>>>>>>>    //-----------------comprobacion de que el último digito es una letra
37594>>>>>>>    Get DNILastChar sDNI (&sMsg) to bRet
37595>>>>>>>    
37595>>>>>>>    If (not(bRet)) Begin
37597>>>>>>>        Move "El último digito tiene que ser una LETRA válida" to sMsg
37598>>>>>>>        Function_Return False
37599>>>>>>>    End
37599>>>>>>>>
37599>>>>>>>    
37599>>>>>>>    //------------------comprobación 8 primeros sean digitos
37599>>>>>>>    Get SinCaracteres sDNI (&sMsg) to bRet
37600>>>>>>>    
37600>>>>>>>    If (not(bRet)) Begin
37602>>>>>>>        Move "Si es un DNI los 8 primeros dígitos tienen que ser números. Si es un NIE la primera letra debe ser X, Y,o Z" to sMsg
37603>>>>>>>        Function_Return False
37604>>>>>>>    End
37604>>>>>>>>
37604>>>>>>>    
37604>>>>>>>    //------------------ comprobación de letra correspondiente
37604>>>>>>>    Get CalcularLetraDNI sDNI (&sMsg) to bRet
37605>>>>>>>    
37605>>>>>>>        If (not(bRet)) Begin
37607>>>>>>>        Move "El NIF/NIE no es válido" to sMsg
37608>>>>>>>        Function_Return False
37609>>>>>>>        End
37609>>>>>>>>
37609>>>>>>>        
37609>>>>>>>    //--------------------
37609>>>>>>>     
37609>>>>>>>    Function_Return True
37610>>>>>>>End_Function
37611>>>>>>>
37611>>>>>>>//-----------------------------------------------longitud del dni introducido
37611>>>>>>>Function DNILen String sDNI String ByRef sMsg Returns Boolean
37614>>>>>>>    Integer iLen
37614>>>>>>>    //-------------
37614>>>>>>>    Move (Length(sDNI)) to iLen
37615>>>>>>>    
37615>>>>>>>    If (iLen <> 9) Begin
37617>>>>>>>        Function_Return False
37618>>>>>>>    End
37618>>>>>>>>
37618>>>>>>>    //--------------
37618>>>>>>>    Function_Return True    
37619>>>>>>>End_Function
37620>>>>>>>
37620>>>>>>>
37620>>>>>>>//---------------------------------------------------última digito letra valida
37620>>>>>>>Function DNILastChar String sDNI String ByRef sMsg Returns Boolean
37623>>>>>>>    Integer iCount
37623>>>>>>>    String sChar sCharCadena
37623>>>>>>>    
37623>>>>>>>    Move (Right(sDNI,1)) to sChar
37624>>>>>>>    For iCount from 1 to (Length(cLetter))
37630>>>>>>>>
37630>>>>>>>        Move (Mid(cLetter,1,iCount)) to sCharCadena
37631>>>>>>>        If (sChar=sCharCadena) Begin
37633>>>>>>>            Function_Return True            
37634>>>>>>>        End
37634>>>>>>>>
37634>>>>>>>    Loop
37635>>>>>>>>
37635>>>>>>>    Function_Return False    
37636>>>>>>>End_Function
37637>>>>>>>
37637>>>>>>>
37637>>>>>>>//-------------------------------------------------------comprueba si hay letras entre los 8 primeros dígitos
37637>>>>>>>Function SinCaracteres String sDNI String ByRef sMsg Returns Boolean
37640>>>>>>>    Integer iCount iCount2
37640>>>>>>>    String sValue sDig sComprobado
37640>>>>>>>    Boolean bRet
37640>>>>>>>
37640>>>>>>>    Move (Left(sDNI,8)) to sValue    
37641>>>>>>>    // Convertir X, Y, Z a 0, 1, 2
37641>>>>>>>        
37641>>>>>>>    If (Left(sValue, 1) = "X") Begin
37643>>>>>>>        Move (Replace("X",sValue, "0")) to sValue
37644>>>>>>>    End
37644>>>>>>>>
37644>>>>>>>    If (Left(sValue, 1) = "Y") Begin
37646>>>>>>>        Move (Replace("Y", sValue, "1")) to sValue
37647>>>>>>>    End
37647>>>>>>>>
37647>>>>>>>    If (Left(sValue, 1) = "Z") Begin
37649>>>>>>>        Move (Replace("Z", sValue, "2")) to sValue
37650>>>>>>>    End
37650>>>>>>>>
37650>>>>>>>    //------------------contador para ver si hay caracteres en la cadena numerica
37650>>>>>>>    For iCount from 1 to (Length(sValue))
37656>>>>>>>>
37656>>>>>>>        Move False to bRet
37657>>>>>>>        Move (Mid(sValue, 1, iCount)) to sDig
37658>>>>>>>        For iCount2 from 1 to (Length(cNumber))
37664>>>>>>>>
37664>>>>>>>            Move (Mid(cNumber, 1, iCount2)) to sComprobado
37665>>>>>>>            If (sDig=sComprobado) Begin
37667>>>>>>>                Move True to bRet
37668>>>>>>>            End
37668>>>>>>>>
37668>>>>>>>        Loop
37669>>>>>>>>
37669>>>>>>>        If (not(bRet)) Begin
37671>>>>>>>            Function_Return False        
37672>>>>>>>        End
37672>>>>>>>>
37672>>>>>>>    Loop
37673>>>>>>>>
37673>>>>>>>    
37673>>>>>>>    Function_Return True    
37674>>>>>>>End_Function
37675>>>>>>>
37675>>>>>>>
37675>>>>>>>//-------------------------------------------------------calcula letra DNI
37675>>>>>>>Function CalcularLetraDNI String sDNI String ByRef sMsg Returns Boolean
37678>>>>>>>    Integer iDNI iResto
37678>>>>>>>    String sLetter sChar
37678>>>>>>>    
37678>>>>>>>    // Convertir X, Y, Z a 0, 1, 2        
37678>>>>>>>    If (Left(sDNI, 1) = "X") Begin
37680>>>>>>>        Move (Replace("X",sDNI, "0")) to sDNI
37681>>>>>>>    End
37681>>>>>>>>
37681>>>>>>>    If (Left(sDNI, 1) = "Y") Begin
37683>>>>>>>        Move (Replace("Y", sDNI, "1")) to sDNI
37684>>>>>>>    End
37684>>>>>>>>
37684>>>>>>>    If (Left(sDNI, 1) = "Z") Begin
37686>>>>>>>        Move (Replace("Z", sDNI, "2")) to sDNI
37687>>>>>>>    End
37687>>>>>>>>
37687>>>>>>>
37687>>>>>>>    //-----------------------------------------asignar la letra al resto de la división
37687>>>>>>>    Move (Right(sDNI, 1)) to sChar 
37688>>>>>>>    Move (Left(sDNI,8)) to iDNI
37689>>>>>>>    Move (Mod(iDNI, 23)) to iResto
37690>>>>>>>    Move (Mid(cLetter, 1, (iResto + 1))) to sLetter
37691>>>>>>>    
37691>>>>>>>    // Asignar la letra correspondiente
37691>>>>>>>     If (sChar = sLetter) Begin
37693>>>>>>>        Function_Return True
37694>>>>>>>    End
37694>>>>>>>>
37694>>>>>>>  
37694>>>>>>>    Function_Return False
37695>>>>>>>End_Function
37696>>>>>Use ValidarEmail.pkg
37696>>>>>
37696>>>>>Open student
37698>>>>>Open schoolhouse
37700>>>>>
37700>>>>>Object oValidationCounty is a DescriptionValidationTable
37702>>>>>    Procedure Fill_List
37705>>>>>        Forward Send Fill_List
37707>>>>>        Send Add_Table_Value "Huelva" "HUELVA"
37708>>>>>        Send Add_Table_Value "Sevilla" "SEVILLA"
37709>>>>>        Send Add_Table_Value "Málaga" "MÁLAGA"
37710>>>>>        Send Add_Table_Value "Cadiz" "CÁDIZ"
37711>>>>>        Send Add_Table_Value "Córdoba" "CÓRDOBA"
37712>>>>>        Send Add_Table_Value "Jaén" "JAÉN"
37713>>>>>        Send Add_Table_Value "Almería" "ALMERÍA"
37714>>>>>        Send Add_Table_Value "Granada" "GRANADA"
37715>>>>>    End_Procedure
37716>>>>>End_Object
37717>>>>>
37717>>>>>//registrar las funciones que luego usaremos para validar email y dni
37717>>>>>Register_Function zValidar_Email Integer iField Returns Boolean
37717>>>>>Register_Function zValidar_Dni Integer iField   Returns Boolean
37717>>>>>
37717>>>>>Class cstudentDataDictionary is a DataDictionary
37718>>>>>    
37718>>>>>    Procedure Construct_Object
37720>>>>>        Forward Send Construct_Object
37722>>>>>        Set Main_File to student.File_Number
37723>>>>>
37723>>>>>        Set Add_Server_File to schoolhouse.File_Number
37724>>>>>
37724>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
37725>>>>>        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
37726>>>>>        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
37727>>>>>        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True
37728>>>>>
37728>>>>>        Set Key_Field_State Field student.ID to True
37729>>>>>        Set Field_Option Field student.ID DD_DISPLAYONLY to True
37730>>>>>
37730>>>>>        Set Field_Option Field student.ModifiedTime DD_DISPLAYONLY to True
37731>>>>>
37731>>>>>        Set Field_Option Field student.CreatedTime DD_DISPLAYONLY to True
37732>>>>>
37732>>>>>//una vez verificado que el email y el dni son correctos se almacena en el campo correspondiente de la bbdd        
37732>>>>>        Set Field_Validate_msg Field student.Email to get_zValidar_Email
37733>>>>>
37733>>>>>        Set Field_Mask_Type Field student.County to Mask_DateTime_Window
37734>>>>>        Set Field_Value_Table Field student.County to oValidationCounty
37735>>>>>        Set Field_Validate_msg Field student.DNI to   get_zValidar_Dni
37736>>>>>
37736>>>>>    End_Procedure
37737>>>>>
37737>>>>>//llamamos a las funciones definidas en los archivos para validar los email y dni
37737>>>>>
37737>>>>>    //llamar a la funcion para validar el email
37737>>>>>    Function zValidar_Email Integer iField Returns Boolean
37739>>>>>        Boolean bRet
37739>>>>>        String sEmail sMsg
37739>>>>>        
37739>>>>>        Get Field_Current_Value Field student.Email to sEmail
37740>>>>>        Get ValidarEmail sEmail (&sMsg) to bRet
37741>>>>>        If (not(bRet)) Begin
37743>>>>>            Send Data_set_error iField DFERR_OPERATOR sMsg
37744>>>>>        End
37744>>>>>>
37744>>>>>        
37744>>>>>        Function_Return (not(bRet))
37745>>>>>        End_Function
37746>>>>>
37746>>>>>    //llamar a la funcion para validar el dni    
37746>>>>>    Function zValidar_Dni Integer iField Returns Boolean
37748>>>>>        Boolean bRet
37748>>>>>        String sDni sMsg
37748>>>>>        
37748>>>>>        Get Field_Current_Value Field student.DNI to sDni
37749>>>>>        Get ValidacionDNI sDni (&sMsg) to bRet
37750>>>>>        If (not(bRet)) Begin
37752>>>>>            Send Data_set_error iField DFERR_OPERATOR sMsg
37753>>>>>        End
37753>>>>>>
37753>>>>>        
37753>>>>>        Function_Return (not(bRet))
37754>>>>>    End_Function
37755>>>>>
37755>>>>>End_Class
37756>>>
37756>>>Object oStudent is a cWebView
37758>>>    Set piColumnCount to 12
37759>>>    Set psCaption to "Alumno"
37760>>>    Set peWebViewStyle to wvsDrilldown
37761>>>    Set peViewType to vtZoom
37762>>>    Set pbShowCaption to False
37763>>>    Set Verify_Save_Msg to 0
37764>>>    Set piMaxWidth to 1024
37765>>>
37765>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
37767>>>    End_Object 
37768>>>
37768>>>    Object ostudent_DD is a cstudentDataDictionary
37770>>>        Set DDO_Server To oschoolhouse_DD
37771>>>    End_Object 
37772>>>
37772>>>    Set Main_DD To ostudent_DD
37773>>>    Set Server  To ostudent_DD
37774>>>
37774>>>
37774>>>    Object oWebMainPanel is a cWebPanel
37776>>>        Set piColumnCount to 12
37777>>>        WebSetResponsive piColumnCount rmMobile to 4
37778>>>
37778>>>        /*Object ostudentID is a cWebForm            Entry_Item student.ID            Set piColumnSpan to 2            Set piColumnIndex to 0            Set peLabelPosition to lpTop            Set psLabel to "ID"        End_Object*/
37778>>>
37778>>>        Object ostudentName is a cWebForm
37780>>>            Entry_Item student.Name
37781>>>            Set piColumnSpan to 4
37782>>>            Set piColumnIndex to 0
37783>>>            Set peLabelPosition to lpTop
37784>>>            Set psLabel to "Nombre"
37785>>>        End_Object 
37786>>>
37786>>>        Object ostudentLastName is a cWebForm
37788>>>            Entry_Item student.LastName
37789>>>            Set piColumnSpan to 6
37790>>>            Set piColumnIndex to 4
37791>>>            Set peLabelPosition to lpTop
37792>>>            Set psLabel to "Apellidos"
37793>>>        End_Object 
37794>>>
37794>>>        Object ostudentBirthday is a cWebDateForm
37796>>>            Entry_Item student.Birthday
37797>>>            Set piColumnSpan to 2
37798>>>            Set piColumnIndex to 0
37799>>>            Set peLabelPosition to lpTop
37800>>>            Set psLabel to "Fecha de Nacimiento"
37801>>>        End_Object 
37802>>>
37802>>>        Object oWebTabContainer is a cWebTabContainer
37804>>>            Set pbFillHeight to True
37805>>>            Set piColumnSpan to 12
37806>>>            Set pbShowLabel to False
37807>>>
37807>>>            Object oPage1 is a cWebTabPage
37809>>>                Set piColumnCount to 12
37810>>>                Set psCaption to "Datos de Contacto"
37811>>>                WebSetResponsive piColumnCount rmMobile to 4
37812>>>
37812>>>                Object ostudentDNI is a cWebForm
37814>>>                    Entry_Item student.DNI
37815>>>                    Set piColumnSpan to 2
37816>>>                    Set piColumnIndex to 0
37817>>>                    Set peLabelPosition to lpTop
37818>>>                    Set psLabel to "DNI"
37819>>>                End_Object 
37820>>>
37820>>>                Object ostudentEmail is a cWebEdit
37822>>>                    Entry_Item student.Email
37823>>>                    Set piColumnSpan to 0
37824>>>                    Set piColumnIndex to 0
37825>>>                    Set peLabelPosition to lpTop
37826>>>                    Set psLabel to "Email"
37827>>>                    Set piMinHeight to 150
37828>>>                End_Object 
37829>>>
37829>>>                Object ostudentCounty is a cWebCombo
37831>>>                    Entry_Item student.County
37832>>>                    Set piColumnSpan to 4
37833>>>                    Set piColumnIndex to 0
37834>>>                    Set peLabelPosition to lpTop
37835>>>                    Set psLabel to "Provincia"
37836>>>                End_Object 
37837>>>
37837>>>                Object ostudentCity is a cWebForm
37839>>>                    Entry_Item student.City
37840>>>                    Set piColumnSpan to 7
37841>>>                    Set piColumnIndex to 4
37842>>>                    Set peLabelPosition to lpTop
37843>>>                    Set psLabel to "Ciudad"
37844>>>                End_Object 
37845>>>
37845>>>                Object ostudentAddress is a cWebForm
37847>>>                    Entry_Item student.Address
37848>>>                    Set piColumnSpan to 10
37849>>>                    Set piColumnIndex to 0
37850>>>                    Set peLabelPosition to lpTop
37851>>>                    Set psLabel to "Dirección"
37852>>>                End_Object 
37853>>>
37853>>>                /*Object oschoolhouseID is a cWebForm                    Entry_Item schoolhouse.ID                    Set piColumnSpan to 3                    Set piColumnIndex to 0                    Set peLabelPosition to lpTop                    Set psLabel to "SchoolHouseID"                    Set pbPromptButton to True                    WebRegisterPath ntNavigateForward oSchoolHouse                    Procedure OnPrompt                        Send NavigatePath                    End_Procedure                End_Object*/ 
37853>>>            End_Object 
37854>>>
37854>>>            Object oPage3 is a cWebTabPage
37856>>>                Set piColumnCount to 12
37857>>>                Set psCaption to "Colegio"
37858>>>                WebSetResponsive piColumnCount rmMobile to 4
37859>>>
37859>>>                /*Object oschoolhouseID is a cWebForm                    Entry_Item schoolhouse.ID                    Set piColumnSpan to 3                    Set piColumnIndex to 0                    Set peLabelPosition to lpTop                    Set psLabel to "ID"                    Set pbPromptButton to False                    WebRegisterPath ntNavigateForward oSelectSchoolHouse                    Procedure OnPrompt                        Send NavigatePath                    End_Procedure                End_Object*/ 
37859>>>
37859>>>                Object oschoolhouseName is a cWebForm
37861>>>                    Entry_Item schoolhouse.Name
37862>>>                    Set piColumnSpan to 6
37863>>>                    Set piColumnIndex to 0
37864>>>                    Set peLabelPosition to lpTop
37865>>>                    Set psLabel to "Nombre"
37866>>>                    Set pbPromptButton to True
37867>>>
37867>>>                    WebRegisterPath ntNavigateForward oSelectSchoolHouse
37873>>>
37873>>>                    Procedure OnPrompt
37876>>>                        Send NavigatePath
37877>>>                    End_Procedure
37878>>>                End_Object 
37879>>>
37879>>>                Object oschoolhouseEmail is a cWebEdit
37881>>>                    Entry_Item schoolhouse.Email
37882>>>                    Set piColumnSpan to 0
37883>>>                    Set piColumnIndex to 0
37884>>>                    Set peLabelPosition to lpTop
37885>>>                    Set psLabel to "Email"
37886>>>                    Set piMinHeight to 150
37887>>>                End_Object 
37888>>>            End_Object 
37889>>>
37889>>>            Object oPage2 is a cWebTabPage
37891>>>                Set piColumnCount to 12
37892>>>                Set psCaption to "Otros"
37893>>>                WebSetResponsive piColumnCount rmMobile to 4
37894>>>
37894>>>                Object ostudentNotes is a cWebForm
37896>>>                    Entry_Item student.Notes
37897>>>                    Set piColumnSpan to 12
37898>>>                    Set piColumnIndex to 0
37899>>>                    Set peLabelPosition to lpTop
37900>>>                    Set psLabel to "Comentarios añadidos"
37901>>>                End_Object 
37902>>>
37902>>>                /*Object ostudentModifiedTime is a cWebForm                    Entry_Item student.ModifiedTime                    Set piColumnSpan to 6                    Set piColumnIndex to 0                    Set peLabelPosition to lpTop                    Set psLabel to "Fecha y hora de modificación"                End_Object                 Object ostudentCreatedTime is a cWebForm                    Entry_Item student.CreatedTime                    Set piColumnSpan to 6                    Set piColumnIndex to 0                    Set peLabelPosition to lpTop                    Set psLabel to "Fecha y hora de Creación"                End_Object*/ 
37902>>>            End_Object 
37903>>>        End_Object 
37904>>>    End_Object 
37905>>>
37905>>>    Object oActionGroup is a cWebMenuGroup
37907>>>
37907>>>        Object oSaveBtn is a cWebMenuItem
37909>>>            Set psCSSClass to "WebSaveMenuItem"
37910>>>            Set psCaption to "Guardar"
37911>>>
37911>>>            Procedure OnClick
37914>>>                Send Request_Save
37915>>>            End_Procedure
37916>>>
37916>>>        End_Object 
37917>>>
37917>>>        Object oEditBtn is a cWebMenuItem
37919>>>            Set psCSSClass to "WebEditMenuItem"
37920>>>            Set psCaption to "Editar"
37921>>>            Procedure OnClick
37924>>>                Send ChangeEditMode True
37925>>>                Send SetActionButtons
37926>>>            End_Procedure
37927>>>
37927>>>        End_Object 
37928>>>
37928>>>        Object oDeleteBtn is a cWebMenuItem
37930>>>            Set psCSSClass to "WebDeleteMenuItem"
37931>>>            Set psCaption to "Borrar"
37932>>>            Set peActionDisplay to adMenu
37933>>>
37933>>>            Procedure OnClick
37936>>>                Send Request_Delete
37937>>>            End_Procedure
37938>>>
37938>>>        End_Object 
37939>>>
37939>>>        Object oCancelChangesBtn is a cWebMenuItem
37941>>>            Set psCSSClass to "WebIcon_Refresh"
37942>>>            Set psCaption to "Limpiar Cambios"
37943>>>            Set peActionDisplay to adMenu
37944>>>            Procedure OnClick
37947>>>                Send RefreshRecord
37948>>>            End_Procedure
37949>>>
37949>>>        End_Object 
37950>>>    End_Object 
37951>>>
37951>>>    Procedure SetActionButtons
37954>>>        tWebNavigateData NavigateData
37954>>>        tWebNavigateData NavigateData
37954>>>        Boolean bHasRecord
37954>>>        Handle hoDD
37954>>>
37954>>>        Get Server to hoDD
37955>>>        Get GetNavigateData to NavigateData
37956>>>        Get HasRecord of hoDD to bHasRecord
37957>>>
37957>>>        // let's hide all buttons and then Show the ones we want
37957>>>        WebSet pbRender of oEditBtn to False
37958>>>        WebSet pbRender of oSaveBtn to False
37959>>>        WebSet pbRender of oCancelChangesBtn to False
37960>>>        WebSet pbRender of oDeleteBtn to False
37961>>>
37961>>>        If (NavigateData.bReadOnly) Begin
37963>>>            WebSet pbRender of oEditBtn to True
37964>>>        End
37964>>>>
37964>>>        Else Begin
37965>>>            WebSet pbRender of oSaveBtn to True
37966>>>            WebSet pbRender of oCancelChangesBtn to True
37967>>>            WebSet pbRender of oDeleteBtn to bHasRecord
37968>>>        End
37968>>>>
37968>>>    End_Procedure
37969>>>
37969>>>    Procedure OnViewSaved Handle hoServer Boolean bChanged
37972>>>        // Close after save
37972>>>        Send NavigateClose Self
37973>>>    End_Procedure
37974>>>
37974>>>    // this will close the view after a delete
37974>>>    Procedure OnViewDeleted Handle hoDDO
37977>>>        Send NavigateClose Self
37978>>>    End_Procedure
37979>>>
37979>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
37982>>>        Case Begin
37982>>>            Case (NavigateData.eNavigateType = nfFromMain)
37984>>>                // If from main, this is a propbably a main file Select to Zoom.
37984>>>                Case Break
37985>>>
37985>>>            Case (NavigateData.eNavigateType = nfFromParent)
37988>>>                // If from parent, this is a constrained drill down.
37988>>>                Case Break
37989>>>
37989>>>            Case (NavigateData.eNavigateType = nfFromChild)
37992>>>                // If from child, this is a probably a parent Zoom from a Zoom.
37992>>>                Case Break
37993>>>
37993>>>            Case Else // must be nfUndefined
37993>>>
37993>>>        Case End
37993>>>
37993>>>        Send SetActionButtons
37994>>>
37994>>>    End_Procedure
37995>>>
37995>>>End_Object 
37996>    Use SelectStudent.wo
Including file: SelectStudent.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\SelectStudent.wo)
37996>>>// C:\DataFlex Projects\ColegioAppWeb\AppSrc\SelectStudent.wo
37996>>>// SelectStudent
37996>>>//
37996>>>
37996>>>Use cWebView.pkg
37996>>>Use cWebList.pkg
37996>>>Use cWebMenuGroup.pkg
37996>>>Use cWebMenuItem.pkg
37996>>>Use cWebColumnButton.pkg
37996>>>Use cWebColumn.pkg
37996>>>Use Student.wo
37996>>>
37996>>>Use cschoolhouseDataDictionary.dd
37996>>>Use cstudentDataDictionary.dd
37996>>>
37996>>>Object oSelectStudent is a cWebView
37998>>>    Set psCaption to "ALUMNOS"
37999>>>    Set peWebViewStyle to wvsDrilldown
38000>>>    Set peViewType to vtSelect
38001>>>    Set piColumnCount to 12
38002>>>    Set pbShowCaption to True
38003>>>    Set piMaxWidth to 1024
38004>>>
38004>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
38006>>>    End_Object 
38007>>>
38007>>>    Object ostudent_DD is a cstudentDataDictionary
38009>>>        Set DDO_Server To oschoolhouse_DD
38010>>>    End_Object 
38011>>>
38011>>>    Set Main_DD To ostudent_DD
38012>>>    Set Server  To ostudent_DD
38013>>>
38013>>>
38013>>>    Object oList is a cWebList
38015>>>        Set piColumnSpan to 12
38016>>>        Set psCSSClass to "MobileList"
38017>>>        Set pbServerOnRowClick to True
38018>>>        Set pbFillHeight to True
38019>>>        Set pbShowHeader to False
38020>>>        Set piSortColumn to 0
38021>>>
38021>>>        /*Object ostudentID is a cWebColumn            Entry_Item student.ID            Set psCaption to "student.ID"            Set piWidth to 124        End_Object*/
38021>>>
38021>>>        Object oDetailButton is a cWebColumnButton
38023>>>            Set psCaption to "btn"
38024>>>            Set piWidth to 45
38025>>>            Set pbFixedWidth to True
38026>>>            Set pbResizable to False
38027>>>            Set piListRowSpan to 8
38028>>>            Set psBtnCssClass to "WebButtonIcon WebIcon_Info"
38029>>>            Set peAlign to alignRight
38030>>>            Set pbShowCaption to False
38031>>>            Set pbHidden to True
38032>>>
38032>>>            WebRegisterPath ntNavigateForward oStudent
38038>>>
38038>>>            Procedure OnClick
38041>>>                Send NavigatePath
38042>>>            End_Procedure
38043>>>
38043>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
38046>>>                Move True to NavigateData.bReadOnly
38047>>>            End_Procedure
38048>>>
38048>>>        End_Object 
38049>>>
38049>>>        Object ostudentName is a cWebColumn
38051>>>            Entry_Item student.Name
38052>>>            Set psCaption to "student.Name"
38053>>>            Set piWidth to 256
38054>>>        End_Object 
38055>>>
38055>>>        Object ostudentLastName is a cWebColumn
38057>>>            Entry_Item student.LastName
38058>>>            Set psCaption to "student.LastName"
38059>>>            Set piWidth to 275
38060>>>        End_Object 
38061>>>
38061>>>        Object ostudentDNI is a cWebColumn
38063>>>            Entry_Item student.DNI
38064>>>            Set psCaption to "student.DNI"
38065>>>            Set piWidth to 137
38066>>>        End_Object 
38067>>>
38067>>>        Object ostudentEmail is a cWebColumn
38069>>>            Entry_Item student.Email
38070>>>            Set psCaption to "student.Email"
38071>>>            Set piWidth to 330
38072>>>        End_Object 
38073>>>
38073>>>        /*Object oschoolhouseID is a cWebColumn            Entry_Item schoolhouse.ID            Set psCaption to "schoolhouse.ID"            Set piWidth to 124            Set pbNewLine to True        End_Object*/ 
38073>>>
38073>>>        Object oschoolhouseName is a cWebColumn
38075>>>            Entry_Item schoolhouse.Name
38076>>>            Set psCaption to "schoolhouse.Name"
38077>>>            Set piWidth to 2243
38078>>>            Set pbNewLine to True
38079>>>        End_Object 
38080>>>
38080>>>        Object oschoolhouseEmail is a cWebColumn
38082>>>            Entry_Item schoolhouse.Email
38083>>>            Set psCaption to "schoolhouse.Email"
38084>>>            Set piWidth to 2182
38085>>>        End_Object 
38086>>>
38086>>>        WebRegisterPath ntNavigateForward oStudent
38092>>>
38092>>>        Procedure OnRowClick String sRowId
38095>>>            tWebNavigateData NavigateData
38095>>>            tWebNavigateData NavigateData
38095>>>            Get GetNavigateData to NavigateData
38096>>>
38096>>>            Case Begin
38096>>>                Case (NavigateData.eNavigateType = nfFromParent)
38098>>>                    Send NavigateForward of oStudent Self
38099>>>                    Case Break
38100>>>
38100>>>                Case (NavigateData.eNavigateType = nfFromChild)
38103>>>                    Send NavigateClose Self
38104>>>                    Case Break
38105>>>
38105>>>                Case (NavigateData.eNavigateType = nfFromMain)
38108>>>                    Send NavigateClose Self
38109>>>                    Case Break
38110>>>
38110>>>                Case Else // must be nfUndefined
38110>>>                    Send NavigateForward of oStudent Self
38111>>>
38111>>>            Case End
38111>>>        End_Procedure
38112>>>
38112>>>        Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
38115>>>            Move True to NavigateData.bReadOnly
38116>>>        End_Procedure
38117>>>
38117>>>    End_Object 
38118>>>
38118>>>    Object oActionGroup is a cWebMenuGroup
38120>>>
38120>>>        Object oSearch is a cWebMenuItem
38122>>>            Set psCSSClass to "WebPromptMenuItem"
38123>>>            Set psCaption to "Buscar"
38124>>>
38124>>>            Procedure OnClick
38127>>>                Send Search of oList
38128>>>            End_Procedure
38129>>>
38129>>>        End_Object 
38130>>>
38130>>>        Object oNewButton is a cWebMenuItem
38132>>>            Set psCSSClass to "WebClearMenuItem"
38133>>>            Set psCaption to "Nuevo"
38134>>>
38134>>>            WebRegisterPath ntNavigateForward oStudent
38140>>>
38140>>>            Procedure OnClick
38143>>>                Send NavigatePath
38144>>>            End_Procedure
38145>>>
38145>>>            Procedure OnGetNavigateForwardData tWebNavigateData ByRef NavigateData Handle hoToView
38148>>>                Move True to NavigateData.bNewRecord
38149>>>            End_Procedure
38150>>>
38150>>>        End_Object 
38151>>>    End_Object 
38152>>>
38152>>>    Procedure OnNavigateForward tWebNavigateData NavigateData Integer hoInvokingView Integer hoInvokingObject
38155>>>        WebSet pbRender of oNewButton to True
38156>>>        WebSet pbRender of oDetailButton to True
38157>>>
38157>>>        Case Begin
38157>>>            Case (NavigateData.eNavigateType = nfFromParent)
38159>>>                // If from parent, this is a constrained drill down
38159>>>                // If Row select does main-zoom we don't need this
38159>>>                WebSet pbRender of oDetailButton to False
38160>>>                Case Break
38161>>>
38161>>>            Case (NavigateData.eNavigateType = nfFromChild)
38164>>>                // If from child, this is a probably a parent lookup from a Zoom
38164>>>                Case Break
38165>>>
38165>>>            Case (NavigateData.eNavigateType = nfFromMain)
38168>>>                // If from main, this is a probably a main-file lookup from a Zoom
38168>>>                WebSet pbRender of oDetailButton to False
38169>>>                Case Break
38170>>>
38170>>>            Case Else // must be nfUndefined
38170>>>                // This may be the start of a drilldown query or this may be used for some kind of custom query.
38170>>>                // If Row select does main-zoom we don't need this
38170>>>                WebSet pbRender of oDetailButton to False
38171>>>
38171>>>        Case End
38171>>>
38171>>>    End_Procedure
38172>>>
38172>>>
38172>>>End_Object 
38173>    Use CheckStatus.wo
Including file: CheckStatus.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\CheckStatus.wo)
38173>>>Use cWebHttpHandler.pkg
38173>>>
38173>>>//  With the cWebHttpHandler you handle complete HTTP requests.
38173>>>Object oCheckStatus is a cWebHttpHandler
38175>>>    
38175>>>    //  The psPath property determines the path in the URL for which requests will be handled.
38175>>>    Set psPath to "CheckMyStatus"
38176>>>    //  Use psVerbs to filter based on the HTTP Verbs. 
38176>>>    Set psVerbs to "GET"
38177>>>
38177>>>    Procedure OnHttpGet String sPath String sAcceptType
38180>>>        Forward Send OnHttpGet sPath sAcceptType
38182>>>        Handle hoJsonResponse
38182>>>        UChar[] ucData
38183>>>        
38183>>>        //Guardamos la fecha y hora actual en la variable definida como tipo DateTime mediante la función correspondiente
38183>>>        DateTime dtCurrentDateTime
38183>>>        Move (CurrentDateTime()) to dtCurrentDateTime
38184>>>        
38184>>>        //creamos la respuesta a la consulta GET y se almacena en la variable definida como tipo Objeto HANDLE + la iniciamos
38184>>>        Get Create (RefClass(cJsonObject)) to hoJsonResponse
38185>>>        Send InitializeJsonType of hoJsonResponse jsonTypeObject
38186>>>        
38186>>>        //en la respuesta enviamos los valores que queramos
38186>>>        Send SetMemberValue of hoJsonResponse "Name" jsonTypeString "App Colegio y Alumnos"
38187>>>        Send SetMemberValue of hoJsonResponse "Status" jsonTypeString "LISTO"
38188>>>        Send SetMemberValue of hoJsonResponse "Fecha y hora Actual" jsonTypeString dtCurrentDateTime
38189>>>        
38189>>>        Send AddHttpResponseHeader of hoJsonResponse "Content-Type" "application/json"
38190>>>        
38190>>>        Get StringifyUtf8 of hoJsonResponse to ucData
38191>>>        
38191>>>        Send Destroy of hoJsonResponse
38192>>>        Send OutputUChar ucData
38193>>>        
38193>>>    End_Procedure    
38194>>>End_Object
38195>    Use ListSchool.wo
Including file: ListSchool.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\ListSchool.wo)
38195>>>Use cWebHttpHandler.pkg
38195>>>Use cJsonObject.pkg
38195>>>Use cschoolhouseDataDictionary.dd
38195>>>
38195>>>
38195>>>//url para consulta GET: http://localhost/ColegioAppWeb/SchoolHouseList
38195>>>//url para consulta POST: http://localhost/ColegioAppWeb/SchoolHouseList/new
38195>>>
38195>>>//  With the cWebHttpHandler you handle complete HTTP requests.
38195>>>Object oListSchool is a cWebHttpHandler
38197>>>    Object oSchoolHouse_DD is a cschoolhouseDataDictionary    
38199>>>    End_Object
38200>>>    
38200>>>    Set Main_DD to oSchoolHouse_DD
38201>>>    
38201>>>    //  The psPath property determines the path in the URL for which requests will be handled.
38201>>>    Set psPath to "SchoolHouseList"
38202>>>    //  Use psVerbs to filter based on the HTTP Verbs. 
38202>>>    Set psVerbs to "GET, POST"
38203>>>
38203>>>    Procedure OnHttpGet String sPath String sAcceptType
38206>>>        String[] aPath
38207>>>        
38207>>>        Get StrSplitToArray sPath "/" to aPath
38208>>>        
38208>>>        If (SizeOfArray(aPath) < 1) Begin
38210>>>            Send SchoolHouseList 
38211>>>            Procedure_Return
38212>>>        End
38212>>>>
38212>>>        
38212>>>        //------------------------Redirige a una operación específica según la ruta
38212>>>        //  Redirect to a specific operation based on the path
38212>>>        If ((aPath[0]) = "") Begin
38214>>>            If (SizeOfArray(aPath) = 2 and aPath[1] > 0) Begin
38216>>>                Send ScoolHouse aPath[1]
38217>>>            End
38217>>>>
38217>>>            Else Begin
38218>>>                Send SchoolHouseList
38219>>>            End
38219>>>>
38219>>>        End
38219>>>>
38219>>>        Else Begin
38220>>>            Send SetResponseStatus 404 "Unknown resource" 
38221>>>        End
38221>>>>
38221>>>    End_Procedure
38222>>>    
38222>>>//------------------------------------------Procedimiento para listar todos los colegios
38222>>>    Procedure SchoolHouseList
38225>>>        Handle hoJson hoSchoolHouse
38225>>>        
38225>>>        Get Create (RefClass(cJsonObject)) to hoJson
38226>>>        Send InitializeJsonType of hoJson jsonTypeArray
38227>>>        
38227>>>        Get Create (RefClass(cJsonObject)) to hoSchoolHouse
38228>>>        
38228>>>        Send Find of oSchoolHouse_DD FIRST_RECORD 1
38229>>>        While (Found)
38233>>>            Send InitializeJsonType of hoSchoolHouse jsonTypeObject
38234>>>            
38234>>>            Send SetMemberValue of hoSchoolHouse "Number" jsonTypeInteger schoolhouse.ID
38235>>>            Send SetMemberValue of hoSchoolHouse "Name" jsonTypeString (Trim(schoolhouse.Name))
38236>>>            Send SetMemberValue of hoSchoolHouse "City" jsonTypeString (Trim(schoolhouse.City))
38237>>>            
38237>>>            Send AddMember of hoJson hoSchoolHouse
38238>>>            
38238>>>            Send Find of oSchoolHouse_DD NEXT_RECORD 1
38239>>>        Loop
38240>>>>
38240>>>        
38240>>>        Send OutputJson hoJson
38241>>>        
38241>>>        Send Destroy of hoSchoolHouse
38242>>>        Send Destroy of hoJson
38243>>>    End_Procedure
38244>>>    
38244>>>//-----------------------------------------Procedimiento para enviar los detalles de un solo colegio    
38244>>>    Procedure ScoolHouse String sKey
38247>>>        Handle hoJson
38247>>>        
38247>>>        Send Clear of oSchoolHouse_DD
38248>>>        Move sKey to schoolhouse.ID
38249>>>        Send Find of oSchoolHouse_DD EQ 1
38250>>>        
38250>>>        If (Found) Begin
38252>>>            Get Create (RefClass(cJsonObject)) to hoJson
38253>>>            Send InitializeJsonType of hoJson jsonTypeObject
38254>>>            
38254>>>            Send SetMemberValue of hoJson "Number" jsonTypeInteger schoolhouse.ID
38255>>>            Send SetMemberValue of hoJson "Name" jsonTypeString (Trim(schoolhouse.Name))
38256>>>            Send SetMemberValue of hoJson "Address" jsonTypeString (Trim(schoolhouse.Address))
38257>>>            Send SetMemberValue of hoJson "County" jsonTypeString (Trim(schoolhouse.County))
38258>>>            Send SetMemberValue of hoJson "City" jsonTypeString (Trim(schoolhouse.City))
38259>>>            Send SetMemberValue of hoJson "ZipCode" jsonTypeString (Trim(schoolhouse.ZipCode))
38260>>>            Send SetMemberValue of hoJson "Email" jsonTypeString (Trim(schoolhouse.Email))
38261>>>            Send SetMemberValue of hoJson "Notes" jsonTypeString (Trim(schoolhouse.Notes))
38262>>>            Send SetMemberValue of hoJson "CreatedTime" jsonTypeString schoolhouse.CreatedTime
38263>>>            Send SetMemberValue of hoJson "ModifiedTime" jsonTypeString schoolhouse.ModifiedTime
38264>>>            
38264>>>            Send OutputJson hoJson
38265>>>            Send Destroy of hoJson
38266>>>        End
38266>>>>
38266>>>        Else Begin
38267>>>            Send SetResponseStatus 404 "Resource not found"
38268>>>        End
38268>>>>
38268>>>    End_Procedure
38269>>>    
38269>>>    
38269>>>
38269>>>    Procedure OnHttpPost String sPath String sContentType String sAcceptType DWord iSize
38272>>>        Forward Send OnHttpPost sPath sContentType sAcceptType iSize
38274>>>        
38274>>>        String[] aPath
38275>>>        
38275>>>        //-----------------Divide el camino en partes
38275>>>        //  Split the path into parts
38275>>>        Get StrSplitToArray sPath "/" to aPath
38276>>>        If (SizeOfArray(aPath) < 2) Begin
38278>>>            Send SetResponseStatus 404 "Invalid resource" 
38279>>>            Procedure_Return
38280>>>        End
38280>>>>
38280>>>        
38280>>>        //-----------------------Redirige a una operación específica según la ruta
38280>>>        //  Redirect to a specific operation based on the path
38280>>>        If (Lowercase(aPath[1]) = "new") Begin
38282>>>            If (SizeOfArray(aPath) > 2 and aPath[2] <> "") Begin
38284>>>                Send SetResponseStatus 400 "Only use POST for creating new resources"
38285>>>            End
38285>>>>
38285>>>            Else Begin
38286>>>                Send SaveSchoolHouse True ""
38287>>>            End
38287>>>>
38287>>>        End
38287>>>>
38287>>>        Else Begin
38288>>>            Send SetResponseStatus 404 "Unknown resource"
38289>>>        End        
38289>>>>
38289>>>    End_Procedure
38290>>>    
38290>>>//--------------------------------------------------Procedimiento para GUARDAR un nuevo objeto COLEGIO    
38290>>>    Procedure SaveSchoolHouse Boolean bCreate String sKey
38293>>>        Handle hoJson
38293>>>        Boolean bSuccess bVal bErr
38293>>>        String sVal
38293>>>        
38293>>>        //-----------------------Encuentra el registro correcto
38293>>>        //  Find the right record
38293>>>        If (bCreate) Begin
38295>>>            Send Clear of oSchoolHouse_DD
38296>>>        End
38296>>>>
38296>>>        Else Begin
38297>>>            Send Clear of oSchoolHouse_DD
38298>>>            Move sKey to schoolhouse.ID
38299>>>            Send Find of oSchoolHouse_DD EQ 1
38300>>>            
38300>>>            If (not(Found)) Begin
38302>>>                Send SetResponseStatus 404 "Resource not found"
38303>>>                Procedure_Return
38304>>>            End
38304>>>>
38304>>>        End
38304>>>>
38304>>>        
38304>>>        //-----------------------Lee los datos de la solicitud
38304>>>        //  Read the request data
38304>>>        Get RequestDataJson (&hoJson) to bSuccess
38305>>>        
38305>>>        If (bSuccess) Begin
38307>>>            Send ErrorQueueStart
38308>>>            
38308>>>            //  Almacena los valores en la variable sVal que se guardarán en la BBDD
38308>>>            If (HasMember(hoJson, "Name")) Begin
38310>>>                Get MemberValue of hoJson "Name" to sVal
38311>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Name)) to sVal
38312>>>            End
38312>>>>
38312>>>            
38312>>>            If (HasMember(hoJson, "Address")) Begin
38314>>>                Get MemberValue of hoJson "Address" to sVal
38315>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Address)) to sVal
38316>>>            End
38316>>>>
38316>>>            
38316>>>            If (HasMember(hoJson, "City")) Begin
38318>>>                Get MemberValue of hoJson "City" to sVal
38319>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.City)) to sVal
38320>>>            End
38320>>>>
38320>>>            
38320>>>            If (HasMember(hoJson, "County")) Begin
38322>>>                Get MemberValue of hoJson "County" to sVal
38323>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.County)) to sVal
38324>>>            End
38324>>>>
38324>>>            
38324>>>            If (HasMember(hoJson, "ZipCode")) Begin
38326>>>                Get MemberValue of hoJson "ZipCode" to sVal
38327>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.ZipCode)) to sVal
38328>>>            End
38328>>>>
38328>>>            
38328>>>            If (HasMember(hoJson, "Email")) Begin
38330>>>                Get MemberValue of hoJson "Email" to sVal
38331>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Email)) to sVal
38332>>>            End
38332>>>>
38332>>>            
38332>>>            If (HasMember(hoJson, "Notes")) Begin
38334>>>                Get MemberValue of hoJson "Notes" to sVal
38335>>>                Set Field_Changed_Value of oSchoolHouse_DD (RefTable(schoolhouse.Notes)) to sVal
38336>>>            End
38336>>>>
38336>>>            
38336>>>            //------------------Realiza el guardado de los datos
38336>>>            //  Perform the save
38336>>>            If (ErrorCount(Self) = 0) Begin
38338>>>                Get Request_Validate of oSchoolHouse_DD to bErr
38339>>>                If (not(bErr)) Begin
38341>>>                   Send Request_Save of oSchoolHouse_DD     
38342>>>                   
38342>>>                   If (not(Err)) Begin
38344>>>                        Send ScoolHouse schoolhouse.ID
38345>>>                   End
38345>>>>
38345>>>                End
38345>>>>
38345>>>            End            
38345>>>>
38345>>>            
38345>>>            Send ErrorQueueEnd
38346>>>            Send ErrorReportJson
38347>>>        End
38347>>>>
38347>>>        
38347>>>        If (hoJson > 0) Begin
38349>>>            Send Destroy of hoJson
38350>>>        End
38350>>>>
38350>>>    End_Procedure
38351>>>
38351>>>//-------------Función auxiliar que genera una respuesta basada en un objeto JSON
38351>>>    //  Helper function that generates a response based on a JSON object.
38351>>>    Procedure OutputJson Handle hoJson
38354>>>        UChar[] ucData
38355>>>        
38355>>>        Send AddHttpResponseHeader "Content-Type" "application/json"
38356>>>        Get StringifyUtf8 of hoJson to ucData
38357>>>        Send OutputUChar ucData
38358>>>    End_Procedure
38359>>>
38359>>>
38359>>>//---------------------Función auxiliar que lee una solicitud completa en un objeto JSON.
38359>>>//  Helper function that reads an entire request into a JSON object.
38359>>>    Function RequestDataJson Handle ByRef hoJson Returns Boolean
38362>>>        UChar[] ucData
38363>>>        Boolean bSuccess
38363>>>        String sErr
38363>>>        
38363>>>        Get Create (RefClass(cJsonObject)) to hoJson
38364>>>        
38364>>>        Get RequestDataUChar -1 to ucData
38365>>>        Get ParseUtf8 of hoJson ucData to bSuccess
38366>>>        
38366>>>        If (not(bSuccess)) Begin
38368>>>            Get psParseError of hoJson to sErr
38369>>>            Send SetResponseStatus 400 sErr
38370>>>        End
38370>>>>
38370>>>        
38370>>>        Function_Return bSuccess
38371>>>    End_Function
38372>>>    
38372>>>    
38372>>>//-----------------------Función auxiliar que informa todos los errores en la cola de errores en formato JSON
38372>>>//  Helper function that reports all errors on the error queue in JSON format.
38372>>>    Procedure ErrorReportJson
38375>>>        Integer iErr iErrC
38375>>>        Handle hoJson hoErrors   
38375>>>        String sMessage
38375>>>        
38375>>>        Get ErrorCount to iErrC
38376>>>        If (iErrC > 0) Begin
38378>>>            Send SetResponseStatus 400 "Errors occurred"
38379>>>            
38379>>>            Get Create (RefClass(cJsonObject)) to hoJson
38380>>>            Send InitializeJsonType of hoJson jsonTypeObject
38381>>>            
38381>>>            Get Create (RefClass(cJsonObject)) to hoErrors
38382>>>            Send InitializeJsonType of hoErrors jsonTypeArray
38383>>>            
38383>>>            For iErr from 0 to (iErrC - 1)
38389>>>>
38389>>>                Get ErrorMessage iErr to sMessage
38390>>>                Send AddMemberValue of hoErrors jsonTypeString  sMessage
38391>>>            Loop
38392>>>>
38392>>>            
38392>>>            Send SetMember of hoJson "aErrors" hoErrors
38393>>>            
38393>>>            Send OutputJson hoJson
38394>>>            
38394>>>            Send Destroy of hoErrors
38395>>>            Send Destroy of hoJson
38396>>>        End
38396>>>>
38396>>>    End_Procedure
38397>>>End_Object
38398>    Use ListStudent.wo
Including file: ListStudent.wo    (C:\DataFlex Projects\ColegioAppWeb\AppSrc\ListStudent.wo)
38398>>>Use cWebHttpHandler.pkg
38398>>>//Use cJsonObject.pkg
38398>>>Use cstudentDataDictionary.dd
38398>>>Use cschoolhouseDataDictionary.dd
38398>>>
38398>>>
38398>>>//url para consulta GET: http://localhost/ColegioAppWeb/Student
38398>>>//url para consulta POST: http://localhost/ColegioAppWeb/Student/new
38398>>>
38398>>>//  With the cWebHttpHandler you handle complete HTTP requests.
38398>>>Object oListStudent is a cWebHttpHandler
38400>>>    Object oschoolhouse_DD is a cschoolhouseDataDictionary
38402>>>    End_Object
38403>>>    
38403>>>    Object ostudent_DD is a cstudentDataDictionary
38405>>>        Set DDO_Server to oschoolhouse_DD
38406>>>    End_Object
38407>>>
38407>>>    Set Main_DD to oStudent_DD
38408>>>    
38408>>>    //  The psPath property determines the path in the URL for which requests will be handled.
38408>>>    Set psPath to "Student"
38409>>>    //  Use psVerbs to filter based on the HTTP Verbs. 
38409>>>    Set psVerbs to "GET, POST"
38410>>>
38410>>>//-------------------------------------Procedimiento GET para obtener los datos de uno o todos los objetos ESTUDIANTE
38410>>>    Procedure OnHttpGet String sPath String sAcceptType
38413>>>        String[] aPath
38414>>>        
38414>>>        Get StrSplitToArray sPath "/" to aPath
38415>>>        
38415>>>        If (SizeOfArray(aPath) < 1) Begin
38417>>>            Send Studentlist 
38418>>>            Procedure_Return
38419>>>        End
38419>>>>
38419>>>        
38419>>>        //------------------------Redirige a una operación específica según la ruta
38419>>>        //  Redirect to a specific operation based on the path
38419>>>        If ((aPath[0]) = "") Begin
38421>>>            If (SizeOfArray(aPath) = 2 and aPath[1] > 0) Begin
38423>>>                Send Student aPath[1]
38424>>>            End
38424>>>>
38424>>>            Else Begin
38425>>>                Send Studentlist
38426>>>            End
38426>>>>
38426>>>        End
38426>>>>
38426>>>        Else Begin
38427>>>            Send SetResponseStatus 404 "Unknown resource" 
38428>>>        End
38428>>>>
38428>>>    End_Procedure
38429>>>    
38429>>>//------------------------------------------Procedimiento para listar todos los ESTUDIANTES
38429>>>    Procedure Studentlist
38432>>>        Handle hoJson hoStudent
38432>>>        
38432>>>        Get Create (RefClass(cJsonObject)) to hoJson
38433>>>        Send InitializeJsonType of hoJson jsonTypeArray
38434>>>        
38434>>>        Get Create (RefClass(cJsonObject)) to hoStudent
38435>>>        
38435>>>        Send Find of oStudent_DD FIRST_RECORD 1
38436>>>        While (Found)
38440>>>            Send InitializeJsonType of hoStudent jsonTypeObject
38441>>>            
38441>>>            Send SetMemberValue of hoStudent "Número" jsonTypeInteger student.ID
38442>>>            Send SetMemberValue of hoStudent "Nombre" jsonTypeString (Trim(student.Name))
38443>>>            Send SetMemberValue of hoStudent "Apellidos" jsonTypeString (Trim(student.LastName))
38444>>>            Send SetMemberValue of hoStudent "DNI" jsonTypeString (Trim(student.DNI))
38445>>>            Send SetMemberValue of hoStudent "Nombre Colegio" jsonTypeString (Trim(schoolhouse.Name))
38446>>>            
38446>>>            Send AddMember of hoJson hoStudent
38447>>>            
38447>>>            Send Find of oStudent_DD NEXT_RECORD 1
38448>>>        Loop
38449>>>>
38449>>>        
38449>>>        Send OutputJson hoJson
38450>>>        
38450>>>        Send Destroy of hoStudent
38451>>>        Send Destroy of hoJson
38452>>>    End_Procedure
38453>>>    
38453>>>//-----------------------------------------Procedimiento para enviar los detalles de un solo ESTUDIANTE    
38453>>>    Procedure Student String sKey
38456>>>        Handle hoJson hoJsonSchoolHouse
38456>>>        
38456>>>        Send Clear of oStudent_DD
38457>>>        Move sKey to student.ID
38458>>>        Send Find of oStudent_DD EQ 1
38459>>>        
38459>>>        If (Found) Begin
38461>>>            Get Create (RefClass(cJsonObject)) to hoJson
38462>>>            Send InitializeJsonType of hoJson jsonTypeObject
38463>>>            
38463>>>            Send SetMemberValue of hoJson "Número" jsonTypeInteger student.ID
38464>>>            Send SetMemberValue of hoJson "Nombre" jsonTypeString (Trim(student.Name))
38465>>>            Send SetMemberValue of hoJson "Apellidos" jsonTypeString (Trim(student.LastName))
38466>>>            Send SetMemberValue of hoJson "Dirección" jsonTypeString (Trim(student.Address))
38467>>>            Send SetMemberValue of hoJson "Ciudad" jsonTypeString (Trim(student.City))
38468>>>            Send SetMemberValue of hoJson "Provincia" jsonTypeString (Trim(student.County))
38469>>>            Send SetMemberValue of hoJson "Fecha Nacimiento" jsonTypeString (Trim(student.Birthday))
38470>>>            Send SetMemberValue of hoJson "DNI" jsonTypeString (Trim(student.DNI))
38471>>>            Send SetMemberValue of hoJson "Email" jsonTypeString (Trim(student.Email))
38472>>>            Send SetMemberValue of hoJson "Notas" jsonTypeString (Trim(student.Notes))
38473>>>            Send SetMemberValue of hoJson "Fecha y Hora de Creación" jsonTypeString (Trim(student.CreatedTime))
38474>>>            Send SetMemberValue of hoJson "Fecha y Hora de Modificación" jsonTypeString (Trim(student.ModifiedTime))
38475>>>            Send SetMemberValue of hoJson "Número de Colegio" jsonTypeString (Trim(student.SchoolHouseID))
38476>>>            Send SetMemberValue of hoJson "Nombre del Colégio" jsonTypeString schoolhouse.Name
38477>>>            Send SetMemberValue of hoJson "Email del Colégio" jsonTypeString schoolhouse.Email
38478>>>                /*Get Create (RefClass(cJsonObject)) to hoJsonSchoolHouse                Send InitializeJsonType of hoJsonSchoolHouse jsonTypeObject                    Send SetMemberValue of hoJsonSchoolHouse "Nombre" jsonTypeString (Trim(schoolhouse.Name))                    Send SetMemberValue of hoJsonSchoolHouse "Email" jsonTypeString (Trim(schoolhouse.Email))*/
38478>>>                    
38478>>>                            /*Send Clear of oschoolhouse_DD                            Move sKey to schoolhouse.ID                            Send Find of oschoolhouse_DD EQ 1             If (Found) Begin                Get Create (RefClass(cJsonObject)) to hoJsonSchoolHouse                Send InitializeJsonType of hoJsonSchoolHouse jsonTypeObject                    Send SetMemberValue of hoJsonSchoolHouse "Name" jsonTypeString (Trim(schoolhouse.Name))                    Send SetMemberValue of hoJsonSchoolHouse "Email" jsonTypeString (Trim(schoolhouse.Email))             End*/
38478>>>            
38478>>>            Send OutputJson hoJson
38479>>>            //Send OutputJson hoJsonSchoolHouse
38479>>>            Send Destroy of hoJson
38480>>>            //Send Destroy of hoJsonSchoolHouse
38480>>>        End
38480>>>>
38480>>>        Else Begin
38481>>>            Send SetResponseStatus 404 "Resource not found"
38482>>>        End
38482>>>>
38482>>>    End_Procedure
38483>>>    
38483>>>//----------------------------------------------------------------------Procedimiento POST para añadir objetos ESTUDIANTE    
38483>>>    Procedure OnHttpPost String sPath String sContentType String sAcceptType DWord iSize
38486>>>        Forward Send OnHttpPost sPath sContentType sAcceptType iSize
38488>>>        
38488>>>        String[] aPath
38489>>>        
38489>>>        //-----------------Divide el camino en partes
38489>>>        //  Split the path into parts
38489>>>        Get StrSplitToArray sPath "/" to aPath
38490>>>        If (SizeOfArray(aPath) < 2) Begin
38492>>>            Send SetResponseStatus 404 "Invalid resource" 
38493>>>            Procedure_Return
38494>>>        End
38494>>>>
38494>>>        
38494>>>        //-----------------------Redirige a una operación específica según la ruta
38494>>>        //  Redirect to a specific operation based on the path
38494>>>        If (Lowercase(aPath[1]) = "new") Begin
38496>>>            If (SizeOfArray(aPath) > 2 and aPath[2] <> "") Begin
38498>>>                Send SetResponseStatus 400 "Only use POST for creating new resources"
38499>>>            End
38499>>>>
38499>>>            Else Begin
38500>>>                Send SaveStudent True ""
38501>>>            End
38501>>>>
38501>>>        End
38501>>>>
38501>>>        Else Begin
38502>>>            Send SetResponseStatus 404 "Unknown resource"
38503>>>        End        
38503>>>>
38503>>>    End_Procedure
38504>>>    
38504>>>//--------------------------------------------------Procedimiento para GUARDAR un nuevo objeto ESTUDIANTE    
38504>>>    Procedure SaveStudent Boolean bCreate String sKey
38507>>>        Handle hoJson
38507>>>        Boolean bSuccess bVal bErr
38507>>>        String sVal
38507>>>        
38507>>>        //-----------------------Encuentra el registro correcto
38507>>>        //  Find the right record
38507>>>        If (bCreate) Begin
38509>>>            Send Clear of oStudent_DD
38510>>>        End
38510>>>>
38510>>>        Else Begin
38511>>>            Send Clear of oStudent_DD
38512>>>            Move sKey to student.ID
38513>>>            Send Find of oStudent_DD EQ 1
38514>>>            
38514>>>            If (not(Found)) Begin
38516>>>                Send SetResponseStatus 404 "Resource not found"
38517>>>                Procedure_Return
38518>>>            End
38518>>>>
38518>>>        End
38518>>>>
38518>>>        
38518>>>        //-----------------------Lee los datos de la solicitud
38518>>>        //  Read the request data
38518>>>        Get RequestDataJson (&hoJson) to bSuccess
38519>>>        
38519>>>        If (bSuccess) Begin
38521>>>            Send ErrorQueueStart
38522>>>            
38522>>>            //  Almacena los valores en la variable sVal que se guardarán en la BBDD
38522>>>            If (HasMember(hoJson, "Name")) Begin
38524>>>                Get MemberValue of hoJson "Name" to sVal
38525>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.Name)) to sVal
38526>>>            End
38526>>>>
38526>>>            
38526>>>            If (HasMember(hoJson, "LastName")) Begin
38528>>>                Get MemberValue of hoJson "LastName" to sVal
38529>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.LastName)) to sVal
38530>>>            End
38530>>>>
38530>>>            
38530>>>            If (HasMember(hoJson, "DNI")) Begin
38532>>>                Get MemberValue of hoJson "DNI" to sVal
38533>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.DNI)) to sVal
38534>>>            End
38534>>>>
38534>>>            
38534>>>            If (HasMember(hoJson, "Email")) Begin
38536>>>                Get MemberValue of hoJson "Email" to sVal
38537>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.Email)) to sVal
38538>>>            End
38538>>>>
38538>>>            
38538>>>            If (HasMember(hoJson, "County")) Begin
38540>>>                Get MemberValue of hoJson "County" to sVal
38541>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.County)) to sVal
38542>>>            End
38542>>>>
38542>>>            
38542>>>            If (HasMember(hoJson, "City")) Begin
38544>>>                Get MemberValue of hoJson "City" to sVal
38545>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.City)) to sVal
38546>>>            End
38546>>>>
38546>>>            
38546>>>            If (HasMember(hoJson, "Address")) Begin
38548>>>                Get MemberValue of hoJson "Address" to sVal
38549>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.Address)) to sVal
38550>>>            End
38550>>>>
38550>>>            
38550>>>            If (HasMember(hoJson, "Birthday")) Begin
38552>>>                Get MemberValue of hoJson "Birthday" to sVal
38553>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.Birthday)) to sVal
38554>>>            End
38554>>>>
38554>>>            
38554>>>            If (HasMember(hoJson, "SchoolHouseID")) Begin
38556>>>                Get MemberValue of hoJson "SchoolHouseID" to sVal
38557>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.SchoolHouseID)) to sVal
38558>>>            End
38558>>>>
38558>>>            
38558>>>            If (HasMember(hoJson, "Notes")) Begin
38560>>>                Get MemberValue of hoJson "Notes" to sVal
38561>>>                Set Field_Changed_Value of oStudent_DD (RefTable(student.Notes)) to sVal
38562>>>            End
38562>>>>
38562>>>            
38562>>>            //------------------Realiza el guardado de los datos
38562>>>            //  Perform the save
38562>>>            If (ErrorCount(Self) = 0) Begin
38564>>>                Get Request_Validate of oStudent_DD to bErr
38565>>>                If (not(bErr)) Begin
38567>>>                   Send Request_Save of oStudent_DD     
38568>>>                   
38568>>>                   If (not(Err)) Begin
38570>>>                        Send Student student.ID
38571>>>                   End
38571>>>>
38571>>>                End
38571>>>>
38571>>>            End            
38571>>>>
38571>>>            
38571>>>            Send ErrorQueueEnd
38572>>>            Send ErrorReportJson
38573>>>        End
38573>>>>
38573>>>        
38573>>>        If (hoJson > 0) Begin
38575>>>            Send Destroy of hoJson
38576>>>        End
38576>>>>
38576>>>    End_Procedure
38577>>>
38577>>>//-------------Función auxiliar que genera una respuesta basada en un objeto JSON
38577>>>    //  Helper function that generates a response based on a JSON object.
38577>>>    Procedure OutputJson Handle hoJson
38580>>>        UChar[] ucData
38581>>>        
38581>>>        Send AddHttpResponseHeader "Content-Type" "application/json"
38582>>>        Get StringifyUtf8 of hoJson to ucData
38583>>>        Send OutputUChar ucData
38584>>>    End_Procedure
38585>>>
38585>>>
38585>>>//---------------------Función auxiliar que lee una solicitud completa en un objeto JSON.
38585>>>//  Helper function that reads an entire request into a JSON object.
38585>>>    Function RequestDataJson Handle ByRef hoJson Returns Boolean
38588>>>        UChar[] ucData
38589>>>        Boolean bSuccess
38589>>>        String sErr
38589>>>        
38589>>>        Get Create (RefClass(cJsonObject)) to hoJson
38590>>>        
38590>>>        Get RequestDataUChar -1 to ucData
38591>>>        Get ParseUtf8 of hoJson ucData to bSuccess
38592>>>        
38592>>>        If (not(bSuccess)) Begin
38594>>>            Get psParseError of hoJson to sErr
38595>>>            Send SetResponseStatus 400 sErr
38596>>>        End
38596>>>>
38596>>>        
38596>>>        Function_Return bSuccess
38597>>>    End_Function
38598>>>    
38598>>>    
38598>>>//-----------------------Función auxiliar que informa todos los errores en la cola de errores en formato JSON
38598>>>//  Helper function that reports all errors on the error queue in JSON format.
38598>>>    Procedure ErrorReportJson
38601>>>        Integer iErr iErrC
38601>>>        Handle hoJson hoErrors   
38601>>>        String sMessage
38601>>>        
38601>>>        Get ErrorCount to iErrC
38602>>>        If (iErrC > 0) Begin
38604>>>            Send SetResponseStatus 400 "Errors occurred"
38605>>>            
38605>>>            Get Create (RefClass(cJsonObject)) to hoJson
38606>>>            Send InitializeJsonType of hoJson jsonTypeObject
38607>>>            
38607>>>            Get Create (RefClass(cJsonObject)) to hoErrors
38608>>>            Send InitializeJsonType of hoErrors jsonTypeArray
38609>>>            
38609>>>            For iErr from 0 to (iErrC - 1)
38615>>>>
38615>>>                Get ErrorMessage iErr to sMessage
38616>>>                Send AddMemberValue of hoErrors jsonTypeString  sMessage
38617>>>            Loop
38618>>>>
38618>>>            
38618>>>            Send SetMember of hoJson "aErrors" hoErrors
38619>>>            
38619>>>            Send OutputJson hoJson
38620>>>            
38620>>>            Send Destroy of hoErrors
38621>>>            Send Destroy of hoJson
38622>>>        End
38622>>>>
38622>>>    End_Procedure
38623>>>End_Object
38624>    Set phoDefaultView to oDashboard
38625>
38625>End_Object
38626>
38626>Send StartWebApp of oWebApp
38627>
Summary
Memory Available: 17453477888
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 25571
Total Resources: 0
Total Commands : 38626
Total Windows  : 0
Total Pages    : 0
Static Data    : 476649
Message area   : 259118
Total Blocks   : 17155
