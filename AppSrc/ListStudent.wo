Use cWebHttpHandler.pkg
Use cJsonObject.pkg
Use cstudentDataDictionary.dd
Use cschoolhouseDataDictionary.dd


//url para consulta GET: http://localhost/ColegioAppWeb/Student
//url para consulta POST: http://localhost/ColegioAppWeb/Student/new

//  With the cWebHttpHandler you handle complete HTTP requests.
Object oListStudent is a cWebHttpHandler
    Object oschoolhouse_DD is a cschoolhouseDataDictionary
    End_Object
    
    Object ostudent_DD is a cstudentDataDictionary
        Set DDO_Server to oschoolhouse_DD
    End_Object

    Set Main_DD to ostudent_DD
    
    //  The psPath property determines the path in the URL for which requests will be handled.
    Set psPath to "Student"
    //  Use psVerbs to filter based on the HTTP Verbs. 
    Set psVerbs to "GET, POST"

//-------------------------------------Procedimiento GET para obtener los datos de uno o todos los objetos ESTUDIANTE
    Procedure OnHttpGet String sPath String sAcceptType
        String[] aPath
        
        Get StrSplitToArray sPath "/" to aPath
        
        If (SizeOfArray(aPath) < 1) Begin
            Send Studentlist 
            Procedure_Return
        End
        
        //------------------------Redirige a una operación específica según la ruta
        //  Redirect to a specific operation based on the path
        If ((aPath[0]) = "") Begin
            If (SizeOfArray(aPath) = 2 and aPath[1] > 0) Begin
                Send Student aPath[1]
            End
            Else Begin
                Send Studentlist
            End
        End
        Else Begin
            Send SetResponseStatus 404 "Unknown resource" 
        End
    End_Procedure
    
//------------------------------------------Procedimiento para listar todos los ESTUDIANTES
    Procedure Studentlist
        Handle hoJson hoStudent
        
        Get Create (RefClass(cJsonObject)) to hoJson
        Send InitializeJsonType of hoJson jsonTypeArray
        
        Get Create (RefClass(cJsonObject)) to hoStudent
        
        Send Find of oStudent_DD FIRST_RECORD 1
        While (Found)
            Send InitializeJsonType of hoStudent jsonTypeObject
            
            Send SetMemberValue of hoStudent "Número" jsonTypeInteger student.ID
            Send SetMemberValue of hoStudent "Nombre" jsonTypeString (Trim(student.Name))
            Send SetMemberValue of hoStudent "Apellidos" jsonTypeString (Trim(student.LastName))
            Send SetMemberValue of hoStudent "DNI" jsonTypeString (Trim(student.DNI))
            Send SetMemberValue of hoStudent "Nombre Colegio" jsonTypeString (Trim(schoolhouse.Name))
            
            Send AddMember of hoJson hoStudent
            
            Send Find of oStudent_DD NEXT_RECORD 1
        Loop
        
        Send OutputJson hoJson
        
        Send Destroy of hoStudent
        Send Destroy of hoJson
    End_Procedure
    
//-----------------------------------------Procedimiento para enviar los detalles de un solo ESTUDIANTE    
    Procedure Student String sKey
        Handle hoJson hoJsonSchoolHouse
        
        Send Clear of oStudent_DD
        Move sKey to student.ID
        Send Find of oStudent_DD EQ 1
        
        If (Found) Begin
            Get Create (RefClass(cJsonObject)) to hoJson
            Send InitializeJsonType of hoJson jsonTypeObject
            
            Send SetMemberValue of hoJson "Número" jsonTypeInteger student.ID
            Send SetMemberValue of hoJson "Nombre" jsonTypeString (Trim(student.Name))
            Send SetMemberValue of hoJson "Apellidos" jsonTypeString (Trim(student.LastName))
            Send SetMemberValue of hoJson "Dirección" jsonTypeString (Trim(student.Address))
            Send SetMemberValue of hoJson "Ciudad" jsonTypeString (Trim(student.City))
            Send SetMemberValue of hoJson "Provincia" jsonTypeString (Trim(student.County))
            Send SetMemberValue of hoJson "Fecha Nacimiento" jsonTypeString (Trim(student.Birthday))
            Send SetMemberValue of hoJson "DNI" jsonTypeString (Trim(student.DNI))
            Send SetMemberValue of hoJson "Email" jsonTypeString (Trim(student.Email))
            Send SetMemberValue of hoJson "Notas" jsonTypeString (Trim(student.Notes))
            Send SetMemberValue of hoJson "Fecha y Hora de Creación" jsonTypeString (Trim(student.CreatedTime))
            Send SetMemberValue of hoJson "Fecha y Hora de Modificación" jsonTypeString (Trim(student.ModifiedTime))
            Send SetMemberValue of hoJson "Número de Colegio" jsonTypeString (Trim(student.SchoolHouseID))
            Send SetMemberValue of hoJson "Nombre del Colégio" jsonTypeString schoolhouse.Name
            Send SetMemberValue of hoJson "Email del Colégio" jsonTypeString schoolhouse.Email
                /*Get Create (RefClass(cJsonObject)) to hoJsonSchoolHouse
                Send InitializeJsonType of hoJsonSchoolHouse jsonTypeObject
                    Send SetMemberValue of hoJsonSchoolHouse "Nombre" jsonTypeString (Trim(schoolhouse.Name))
                    Send SetMemberValue of hoJsonSchoolHouse "Email" jsonTypeString (Trim(schoolhouse.Email))*/
                    
                            /*Send Clear of oschoolhouse_DD
                            Move sKey to schoolhouse.ID
                            Send Find of oschoolhouse_DD EQ 1
             If (Found) Begin
                Get Create (RefClass(cJsonObject)) to hoJsonSchoolHouse
                Send InitializeJsonType of hoJsonSchoolHouse jsonTypeObject
                    Send SetMemberValue of hoJsonSchoolHouse "Name" jsonTypeString (Trim(schoolhouse.Name))
                    Send SetMemberValue of hoJsonSchoolHouse "Email" jsonTypeString (Trim(schoolhouse.Email))
             End*/
            
            Send OutputJson hoJson
            //Send OutputJson hoJsonSchoolHouse
            Send Destroy of hoJson
            //Send Destroy of hoJsonSchoolHouse
        End
        Else Begin
            Send SetResponseStatus 404 "Resource not found"
        End
    End_Procedure
    
//----------------------------------------------------------------------Procedimiento POST para añadir objetos ESTUDIANTE    
    Procedure OnHttpPost String sPath String sContentType String sAcceptType DWord iSize
        Forward Send OnHttpPost sPath sContentType sAcceptType iSize
        
        String[] aPath
        
        //-----------------Divide el camino en partes
        //  Split the path into parts
        Get StrSplitToArray sPath "/" to aPath
        If (SizeOfArray(aPath) < 2) Begin
            Send SetResponseStatus 404 "Invalid resource" 
            Procedure_Return
        End
        
        //-----------------------Redirige a una operación específica según la ruta
        //  Redirect to a specific operation based on the path
        If (Lowercase(aPath[1]) = "new") Begin
            If (SizeOfArray(aPath) > 2 and aPath[2] <> "") Begin
                Send SetResponseStatus 400 "Only use POST for creating new resources"
            End
            Else Begin
                Send SaveStudent True ""
            End
        End
        Else Begin
            Send SetResponseStatus 404 "Unknown resource"
        End        
    End_Procedure
    
//--------------------------------------------------Procedimiento para GUARDAR un nuevo objeto ESTUDIANTE    
    Procedure SaveStudent Boolean bCreate String sKey
        Handle hoJson
        Boolean bSuccess bVal bErr
        String sVal
        
        //-----------------------Encuentra el registro correcto
        //  Find the right record
        If (bCreate) Begin
            Send Clear of oStudent_DD
        End
        Else Begin
            Send Clear of oStudent_DD
            Move sKey to student.ID
            Send Find of oStudent_DD EQ 1
            
            If (not(Found)) Begin
                Send SetResponseStatus 404 "Resource not found"
                Procedure_Return
            End
        End
        
        //-----------------------Lee los datos de la solicitud
        //  Read the request data
        Get RequestDataJson (&hoJson) to bSuccess
        
        If (bSuccess) Begin
            Send ErrorQueueStart
            
            //  Almacena los valores en la variable sVal que se guardarán en la BBDD
            If (HasMember(hoJson, "Name")) Begin
                Get MemberValue of hoJson "Name" to sVal
                Set Field_Changed_Value of oStudent_DD (RefTable(student.Name)) to sVal
            End
            
            If (HasMember(hoJson, "LastName")) Begin
                Get MemberValue of hoJson "LastName" to sVal
                Set Field_Changed_Value of oStudent_DD (RefTable(student.LastName)) to sVal
            End
            
            If (HasMember(hoJson, "DNI")) Begin
                Get MemberValue of hoJson "DNI" to sVal
                Set Field_Changed_Value of oStudent_DD (RefTable(student.DNI)) to sVal
            End
            
            If (HasMember(hoJson, "Email")) Begin
                Get MemberValue of hoJson "Email" to sVal
                Set Field_Changed_Value of oStudent_DD (RefTable(student.Email)) to sVal
            End
            
            If (HasMember(hoJson, "County")) Begin
                Get MemberValue of hoJson "County" to sVal
                Set Field_Changed_Value of oStudent_DD (RefTable(student.County)) to sVal
            End
            
            If (HasMember(hoJson, "City")) Begin
                Get MemberValue of hoJson "City" to sVal
                Set Field_Changed_Value of oStudent_DD (RefTable(student.City)) to sVal
            End
            
            If (HasMember(hoJson, "Address")) Begin
                Get MemberValue of hoJson "Address" to sVal
                Set Field_Changed_Value of oStudent_DD (RefTable(student.Address)) to sVal
            End
            
            If (HasMember(hoJson, "Birthday")) Begin
                Get MemberValue of hoJson "Birthday" to sVal
                Set Field_Changed_Value of oStudent_DD (RefTable(student.Birthday)) to sVal
            End
            
            If (HasMember(hoJson, "SchoolHouseID")) Begin
                Get MemberValue of hoJson "SchoolHouseID" to sVal
                    Send Clear of oschoolhouse_DD
                    Move sVal to schoolhouse.ID
                    Send Find of oschoolhouse_DD EQ 1
            End
            
            If (HasMember(hoJson, "Notes")) Begin
                Get MemberValue of hoJson "Notes" to sVal
                Set Field_Changed_Value of oStudent_DD (RefTable(student.Notes)) to sVal
            End
            
            //------------------Realiza el guardado de los datos
            //  Perform the save
            If (ErrorCount(Self) = 0) Begin
                Get Request_Validate of ostudent_DD to bErr
                If (not(bErr)) Begin
                   Send Request_Save of ostudent_DD     
                   
                   If (not(Err)) Begin
                        Send Student student.ID
                   End
                End
            End            
            
            Send ErrorQueueEnd
            Send ErrorReportJson
        End
        
        If (hoJson > 0) Begin
            Send Destroy of hoJson
        End
    End_Procedure

//-------------Función auxiliar que genera una respuesta basada en un objeto JSON
    //  Helper function that generates a response based on a JSON object.
    Procedure OutputJson Handle hoJson
        UChar[] ucData
        
        Send AddHttpResponseHeader "Content-Type" "application/json"
        Get StringifyUtf8 of hoJson to ucData
        Send OutputUChar ucData
    End_Procedure


//---------------------Función auxiliar que lee una solicitud completa en un objeto JSON.
//  Helper function that reads an entire request into a JSON object.
    Function RequestDataJson Handle ByRef hoJson Returns Boolean
        UChar[] ucData
        Boolean bSuccess
        String sErr
        
        Get Create (RefClass(cJsonObject)) to hoJson
        
        Get RequestDataUChar -1 to ucData
        Get ParseUtf8 of hoJson ucData to bSuccess
        
        If (not(bSuccess)) Begin
            Get psParseError of hoJson to sErr
            Send SetResponseStatus 400 sErr
        End
        
        Function_Return bSuccess
    End_Function
    
    
//-----------------------Función auxiliar que informa todos los errores en la cola de errores en formato JSON
//  Helper function that reports all errors on the error queue in JSON format.
    Procedure ErrorReportJson
        Integer iErr iErrC
        Handle hoJson hoErrors   
        String sMessage
        
        Get ErrorCount to iErrC
        If (iErrC > 0) Begin
            Send SetResponseStatus 400 "Errors occurred"
            
            Get Create (RefClass(cJsonObject)) to hoJson
            Send InitializeJsonType of hoJson jsonTypeObject
            
            Get Create (RefClass(cJsonObject)) to hoErrors
            Send InitializeJsonType of hoErrors jsonTypeArray
            
            For iErr from 0 to (iErrC - 1)
                Get ErrorMessage iErr to sMessage
                Send AddMemberValue of hoErrors jsonTypeString  sMessage
            Loop
            
            Send SetMember of hoJson "aErrors" hoErrors
            
            Send OutputJson hoJson
            
            Send Destroy of hoErrors
            Send Destroy of hoJson
        End
    End_Procedure
End_Object